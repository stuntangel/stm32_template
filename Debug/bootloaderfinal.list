
bootloaderfinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005708  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  080058b4  080058b4  000068b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  0000702c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fac  08005fac  00006fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb4  08005fb4  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb4  08005fb4  00006fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fb8  08005fb8  00006fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005fbc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000002c  08005fe8  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08005fe8  0000754c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e374  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c0  00000000  00000000  000153d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00017c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008cb  00000000  00000000  00018820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e34  00000000  00000000  000190eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efc3  00000000  00000000  00041f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f93f3  00000000  00000000  00050ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a2d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d2c  00000000  00000000  0014a318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014d044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800589c 	.word	0x0800589c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	0800589c 	.word	0x0800589c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8000522:	4b21      	ldr	r3, [pc, #132]	@ (80005a8 <Int2Str+0x90>)
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	e02e      	b.n	8000592 <Int2Str+0x7a>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	fbb2 f3f3 	udiv	r3, r2, r3
 800053c:	b2da      	uxtb	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1c59      	adds	r1, r3, #1
 8000542:	60f9      	str	r1, [r7, #12]
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	440b      	add	r3, r1
 8000548:	3230      	adds	r2, #48	@ 0x30
 800054a:	b2d2      	uxtb	r2, r2
 800054c:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	fbb3 f2f2 	udiv	r2, r3, r2
 8000556:	6939      	ldr	r1, [r7, #16]
 8000558:	fb01 f202 	mul.w	r2, r1, r2
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	4a12      	ldr	r2, [pc, #72]	@ (80005ac <Int2Str+0x94>)
 8000564:	fba2 2303 	umull	r2, r3, r2, r3
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') && (status == 0))
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	3b01      	subs	r3, #1
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b30      	cmp	r3, #48	@ 0x30
 8000578:	d105      	bne.n	8000586 <Int2Str+0x6e>
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <Int2Str+0x6e>
    {
      pos = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e002      	b.n	800058c <Int2Str+0x74>
    }
    else
    {
      status++;
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	3301      	adds	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	3301      	adds	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b09      	cmp	r3, #9
 8000596:	d9cd      	bls.n	8000534 <Int2Str+0x1c>
    }
  }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	371c      	adds	r7, #28
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	3b9aca00 	.word	0x3b9aca00
 80005ac:	cccccccd 	.word	0xcccccccd

080005b0 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b087      	sub	sp, #28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b30      	cmp	r3, #48	@ 0x30
 80005cc:	f040 80d7 	bne.w	800077e <Str2Int+0x1ce>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b78      	cmp	r3, #120	@ 0x78
 80005d8:	d005      	beq.n	80005e6 <Str2Int+0x36>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b58      	cmp	r3, #88	@ 0x58
 80005e2:	f040 80cc 	bne.w	800077e <Str2Int+0x1ce>
  {
    i = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80005ea:	e057      	b.n	800069c <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b40      	cmp	r3, #64	@ 0x40
 80005f6:	d905      	bls.n	8000604 <Str2Int+0x54>
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b46      	cmp	r3, #70	@ 0x46
 8000602:	d917      	bls.n	8000634 <Str2Int+0x84>
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b60      	cmp	r3, #96	@ 0x60
 800060e:	d905      	bls.n	800061c <Str2Int+0x6c>
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b66      	cmp	r3, #102	@ 0x66
 800061a:	d90b      	bls.n	8000634 <Str2Int+0x84>
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b2f      	cmp	r3, #47	@ 0x2f
 8000626:	d933      	bls.n	8000690 <Str2Int+0xe0>
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	4413      	add	r3, r2
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b39      	cmp	r3, #57	@ 0x39
 8000632:	d82d      	bhi.n	8000690 <Str2Int+0xe0>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	440a      	add	r2, r1
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	2a2f      	cmp	r2, #47	@ 0x2f
 8000642:	d90b      	bls.n	800065c <Str2Int+0xac>
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	440a      	add	r2, r1
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	2a39      	cmp	r2, #57	@ 0x39
 800064e:	d805      	bhi.n	800065c <Str2Int+0xac>
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	697a      	ldr	r2, [r7, #20]
 8000654:	440a      	add	r2, r1
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	3a30      	subs	r2, #48	@ 0x30
 800065a:	e016      	b.n	800068a <Str2Int+0xda>
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	440a      	add	r2, r1
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	2a40      	cmp	r2, #64	@ 0x40
 8000666:	d90b      	bls.n	8000680 <Str2Int+0xd0>
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	440a      	add	r2, r1
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	2a46      	cmp	r2, #70	@ 0x46
 8000672:	d805      	bhi.n	8000680 <Str2Int+0xd0>
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	440a      	add	r2, r1
 800067a:	7812      	ldrb	r2, [r2, #0]
 800067c:	3a37      	subs	r2, #55	@ 0x37
 800067e:	e004      	b.n	800068a <Str2Int+0xda>
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	440a      	add	r2, r1
 8000686:	7812      	ldrb	r2, [r2, #0]
 8000688:	3a57      	subs	r2, #87	@ 0x57
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e002      	b.n	8000696 <Str2Int+0xe6>
      }
      else
      {
        /* Return 0, Invalid input */
        res = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
        break;
 8000694:	e00b      	b.n	80006ae <Str2Int+0xfe>
      }
      i++;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2b0a      	cmp	r3, #10
 80006a0:	d805      	bhi.n	80006ae <Str2Int+0xfe>
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d19e      	bne.n	80005ec <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d167      	bne.n	800078a <Str2Int+0x1da>
    {
      *p_intnum = val;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]
      res = 1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 80006c4:	e061      	b.n	800078a <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d105      	bne.n	80006de <Str2Int+0x12e>
      {
        *p_intnum = val;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	e04c      	b.n	8000778 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b6b      	cmp	r3, #107	@ 0x6b
 80006e8:	d005      	beq.n	80006f6 <Str2Int+0x146>
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b4b      	cmp	r3, #75	@ 0x4b
 80006f4:	d10b      	bne.n	800070e <Str2Int+0x15e>
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <Str2Int+0x15e>
      {
        val = val << 10;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	029b      	lsls	r3, r3, #10
 8000700:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	601a      	str	r2, [r3, #0]
        res = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	e034      	b.n	8000778 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b6d      	cmp	r3, #109	@ 0x6d
 8000718:	d005      	beq.n	8000726 <Str2Int+0x176>
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b4d      	cmp	r3, #77	@ 0x4d
 8000724:	d10b      	bne.n	800073e <Str2Int+0x18e>
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <Str2Int+0x18e>
      {
        val = val << 20;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	051b      	lsls	r3, r3, #20
 8000730:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	601a      	str	r2, [r3, #0]
        res = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	e01c      	b.n	8000778 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b2f      	cmp	r3, #47	@ 0x2f
 8000748:	d913      	bls.n	8000772 <Str2Int+0x1c2>
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b39      	cmp	r3, #57	@ 0x39
 8000754:	d80d      	bhi.n	8000772 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4619      	mov	r1, r3
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	440b      	add	r3, r1
 800076c:	3b30      	subs	r3, #48	@ 0x30
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	e002      	b.n	8000778 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
        break;
 8000776:	e008      	b.n	800078a <Str2Int+0x1da>
      }
      i++;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3301      	adds	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d802      	bhi.n	800078a <Str2Int+0x1da>
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d19d      	bne.n	80006c6 <Str2Int+0x116>
    }
  }

  return res;
 800078a:	693b      	ldr	r3, [r7, #16]
}
 800078c:	4618      	mov	r0, r3
 800078e:	371c      	adds	r7, #28
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80007a4:	e002      	b.n	80007ac <Serial_PutString+0x14>
  {
    length++;
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	3301      	adds	r3, #1
 80007aa:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f6      	bne.n	80007a6 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&hlpuart1, p_string, length, TX_TIMEOUT);
 80007b8:	89fa      	ldrh	r2, [r7, #14]
 80007ba:	2364      	movs	r3, #100	@ 0x64
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4803      	ldr	r0, [pc, #12]	@ (80007cc <Serial_PutString+0x34>)
 80007c0:	f004 fa1a 	bl	8004bf8 <HAL_UART_Transmit>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000048 	.word	0x20000048

080007d0 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t param)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if (hlpuart1.gState == HAL_UART_STATE_TIMEOUT)
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <Serial_PutByte+0x30>)
 80007dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80007de:	2ba0      	cmp	r3, #160	@ 0xa0
 80007e0:	d102      	bne.n	80007e8 <Serial_PutByte+0x18>
  {
    hlpuart1.gState = HAL_UART_STATE_READY;
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <Serial_PutByte+0x30>)
 80007e4:	2220      	movs	r2, #32
 80007e6:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
  return HAL_UART_Transmit(&hlpuart1, &param, 1, TX_TIMEOUT);
 80007e8:	1df9      	adds	r1, r7, #7
 80007ea:	2364      	movs	r3, #100	@ 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	4804      	ldr	r0, [pc, #16]	@ (8000800 <Serial_PutByte+0x30>)
 80007f0:	f004 fa02 	bl	8004bf8 <HAL_UART_Transmit>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000048 	.word	0x20000048

08000804 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 8000808:	f001 fe02 	bl	8002410 <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <FLASH_If_Init+0x18>)
 800080e:	f248 0291 	movw	r2, #32913	@ 0x8091
 8000812:	611a      	str	r2, [r3, #16]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
 8000814:	f001 fe1e 	bl	8002454 <HAL_FLASH_Lock>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40022000 	.word	0x40022000

08000820 <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t NbrOfPages = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t PageError = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 8000830:	2300      	movs	r3, #0
 8000832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 8000836:	f001 fdeb 	bl	8002410 <HAL_FLASH_Unlock>

  /* Get the number of page to  erase */
  NbrOfPages = (FLASH_START_ADRESS + FLASH_SIZE);
 800083a:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <FLASH_If_Erase+0xd0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	b29b      	uxth	r3, r3
 8000840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000844:	4293      	cmp	r3, r2
 8000846:	d007      	beq.n	8000858 <FLASH_If_Erase+0x38>
 8000848:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <FLASH_If_Erase+0xd0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	029a      	lsls	r2, r3, #10
 800084e:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <FLASH_If_Erase+0xd4>)
 8000850:	4013      	ands	r3, r2
 8000852:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000856:	e001      	b.n	800085c <FLASH_If_Erase+0x3c>
 8000858:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  NbrOfPages = (NbrOfPages - start) / FLASH_PAGE_SIZE;
 800085e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	0adb      	lsrs	r3, r3, #11
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24

  if(NbrOfPages > FLASH_PAGE_NBPERBANK)
 8000868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800086e:	d918      	bls.n	80008a2 <FLASH_If_Erase+0x82>
  {
    pEraseInit.Banks = FLASH_BANK_1;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
    pEraseInit.NbPages = NbrOfPages % FLASH_PAGE_NBPERBANK;
 8000874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000876:	b2db      	uxtb	r3, r3
 8000878:	61bb      	str	r3, [r7, #24]
    pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000880:	617b      	str	r3, [r7, #20]
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
    status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000886:	f107 021c 	add.w	r2, r7, #28
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fecf 	bl	8002634 <HAL_FLASHEx_Erase>
 8000896:	4603      	mov	r3, r0
 8000898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
    NbrOfPages = FLASH_PAGE_NBPERBANK;
 800089c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  if(status == HAL_OK)
 80008a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d114      	bne.n	80008d4 <FLASH_If_Erase+0xb4>
  {
    pEraseInit.Banks = FLASH_BANK_2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
    pEraseInit.NbPages = NbrOfPages;
 80008ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b0:	61bb      	str	r3, [r7, #24]
    pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80008b8:	617b      	str	r3, [r7, #20]
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
    status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80008be:	f107 021c 	add.w	r2, r7, #28
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 feb3 	bl	8002634 <HAL_FLASHEx_Erase>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }
  
  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80008d4:	f001 fdbe 	bl	8002454 <HAL_FLASH_Lock>

  if (status != HAL_OK)
 80008d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <FLASH_If_Erase+0xc4>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <FLASH_If_Erase+0xc6>
  }

  return FLASHIF_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	1fff75e0 	.word	0x1fff75e0
 80008f4:	03fffc00 	.word	0x03fffc00

080008f8 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t status = FLASHIF_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 800090c:	f001 fd80 	bl	8002410 <HAL_FLASH_Unlock>

  /* DataLength must be a multiple of 64 bit */
  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	e026      	b.n	8000964 <FLASH_If_Write+0x6c>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t *)(p_source+2*i))) == HAL_OK)      
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000922:	68f9      	ldr	r1, [r7, #12]
 8000924:	2000      	movs	r0, #0
 8000926:	f001 fd07 	bl	8002338 <HAL_FLASH_Program>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d113      	bne.n	8000958 <FLASH_If_Write+0x60>
    {
     /* Check the written value */
      if (*(uint64_t*)destination != *(uint64_t *)(p_source+2*i))
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	4413      	add	r3, r2
 800093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000942:	4299      	cmp	r1, r3
 8000944:	bf08      	it	eq
 8000946:	4290      	cmpeq	r0, r2
 8000948:	d002      	beq.n	8000950 <FLASH_If_Write+0x58>
      {
        /* Flash content doesn't match SRAM content */
        status = FLASHIF_WRITINGCTRL_ERROR;
 800094a:	2302      	movs	r3, #2
 800094c:	617b      	str	r3, [r7, #20]
        break;
 800094e:	e012      	b.n	8000976 <FLASH_If_Write+0x7e>
      }
      /* Increment FLASH destination address */
      destination += 8;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3308      	adds	r3, #8
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e002      	b.n	800095e <FLASH_If_Write+0x66>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      status = FLASHIF_WRITING_ERROR;
 8000958:	2303      	movs	r3, #3
 800095a:	617b      	str	r3, [r7, #20]
      break;
 800095c:	e00b      	b.n	8000976 <FLASH_If_Write+0x7e>
  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	3301      	adds	r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	429a      	cmp	r2, r3
 800096c:	d203      	bcs.n	8000976 <FLASH_If_Write+0x7e>
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <FLASH_If_Write+0x8c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d9cf      	bls.n	8000916 <FLASH_If_Write+0x1e>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8000976:	f001 fd6d 	bl	8002454 <HAL_FLASH_Lock>

  return status;
 800097a:	697b      	ldr	r3, [r7, #20]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	080ffff8 	.word	0x080ffff8

08000988 <FLASH_If_GetWriteProtectionStatus>:
  * @retval If a sector in application area is write-protected returned value is a combinaison
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0aa      	sub	sp, #168	@ 0xa8
 800098c:	af00      	add	r7, sp, #0
  uint32_t ProtectedPAGE = FLASHIF_PROTECTION_NONE;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  FLASH_OBProgramInitTypeDef OptionsBytesStruct1, OptionsBytesStruct2, OptionsBytesStruct3, OptionsBytesStruct4;
  
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8000994:	f001 fd3c 	bl	8002410 <HAL_FLASH_Unlock>
 
  OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  OptionsBytesStruct1.PCROPConfig = FLASH_BANK_1;
 800099e:	2301      	movs	r3, #1
 80009a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  OptionsBytesStruct2.WRPArea = OB_WRPAREA_BANK1_AREAB;
 80009a4:	2301      	movs	r3, #1
 80009a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  OptionsBytesStruct2.PCROPConfig = FLASH_BANK_1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	673b      	str	r3, [r7, #112]	@ 0x70
  OptionsBytesStruct3.WRPArea = OB_WRPAREA_BANK2_AREAA;
 80009ac:	2302      	movs	r3, #2
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  OptionsBytesStruct3.PCROPConfig = FLASH_BANK_2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  OptionsBytesStruct4.WRPArea = OB_WRPAREA_BANK2_AREAB;
 80009b4:	2304      	movs	r3, #4
 80009b6:	60bb      	str	r3, [r7, #8]
  OptionsBytesStruct4.PCROPConfig = FLASH_BANK_2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  
  /* Check if there are write protected sectors inside the user flash area ***/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct1);
 80009bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 ff41 	bl	8002848 <HAL_FLASHEx_OBGetConfig>
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct2);
 80009c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 ff3c 	bl	8002848 <HAL_FLASHEx_OBGetConfig>
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct3);
 80009d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 ff37 	bl	8002848 <HAL_FLASHEx_OBGetConfig>
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct4);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 ff33 	bl	8002848 <HAL_FLASHEx_OBGetConfig>
  
  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80009e2:	f001 fd37 	bl	8002454 <HAL_FLASH_Lock>
  
  /* Check PCROP areas */
  if(OptionsBytesStruct1.PCROPEndAddr > OptionsBytesStruct1.PCROPStartAddr)
 80009e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80009ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d90a      	bls.n	8000a08 <FLASH_If_GetWriteProtectionStatus+0x80>
  {
    /* check if user area are included inside this range */
    if(OptionsBytesStruct1.PCROPStartAddr > APPLICATION_ADDRESS) 
 80009f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009f6:	4a39      	ldr	r2, [pc, #228]	@ (8000adc <FLASH_If_GetWriteProtectionStatus+0x154>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d905      	bls.n	8000a08 <FLASH_If_GetWriteProtectionStatus+0x80>
    {
      ProtectedPAGE|= FLASHIF_PROTECTION_PCROPENABLED;
 80009fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }
  }
  
  if(OptionsBytesStruct2.PCROPEndAddr > OptionsBytesStruct2.PCROPStartAddr)
 8000a08:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d90a      	bls.n	8000a26 <FLASH_If_GetWriteProtectionStatus+0x9e>
  {
    /* check if user area are included inside this range */
    if(OptionsBytesStruct1.PCROPStartAddr > APPLICATION_ADDRESS)
 8000a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a14:	4a31      	ldr	r2, [pc, #196]	@ (8000adc <FLASH_If_GetWriteProtectionStatus+0x154>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d905      	bls.n	8000a26 <FLASH_If_GetWriteProtectionStatus+0x9e>
    {
       ProtectedPAGE|= FLASHIF_PROTECTION_PCROPENABLED;
 8000a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }
  }
  
  /* check WRP */
  if(OptionsBytesStruct1.WRPEndOffset > OptionsBytesStruct1.WRPStartOffset)
 8000a26:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d90d      	bls.n	8000a4e <FLASH_If_GetWriteProtectionStatus+0xc6>
  {
    /* check if area is inside the WRP Range */ 
    if((OptionsBytesStruct1.WRPStartOffset * FLASH_PAGE_SIZE + FLASH_BASE) >= APPLICATION_ADDRESS)
 8000a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a36:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000a3a:	02db      	lsls	r3, r3, #11
 8000a3c:	4a28      	ldr	r2, [pc, #160]	@ (8000ae0 <FLASH_If_GetWriteProtectionStatus+0x158>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d905      	bls.n	8000a4e <FLASH_If_GetWriteProtectionStatus+0xc6>
    {
       ProtectedPAGE|= FLASHIF_PROTECTION_WRPENABLED;
 8000a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }   
  }

  if(OptionsBytesStruct2.WRPEndOffset > OptionsBytesStruct2.WRPStartOffset)
 8000a4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d90c      	bls.n	8000a70 <FLASH_If_GetWriteProtectionStatus+0xe8>
  {
    /* check if area is inside the WRP Range */ 
    if((OptionsBytesStruct2.WRPStartOffset * FLASH_PAGE_SIZE + FLASH_BASE) >= APPLICATION_ADDRESS)
 8000a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a58:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000a5c:	02db      	lsls	r3, r3, #11
 8000a5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <FLASH_If_GetWriteProtectionStatus+0x158>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d905      	bls.n	8000a70 <FLASH_If_GetWriteProtectionStatus+0xe8>
    {
       ProtectedPAGE|= FLASHIF_PROTECTION_WRPENABLED;
 8000a64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }   
  }

  if(OptionsBytesStruct3.WRPEndOffset > OptionsBytesStruct3.WRPStartOffset)
 8000a70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d90e      	bls.n	8000a96 <FLASH_If_GetWriteProtectionStatus+0x10e>
  {
    /* check if area is inside the WRP Range */ 
    if((OptionsBytesStruct3.WRPStartOffset * FLASH_PAGE_SIZE + FLASH_BASE + FLASH_PAGE_SIZE * FLASH_PAGE_NBPERBANK) >= APPLICATION_ADDRESS)
 8000a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000a7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a82:	02db      	lsls	r3, r3, #11
 8000a84:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <FLASH_If_GetWriteProtectionStatus+0x158>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d905      	bls.n	8000a96 <FLASH_If_GetWriteProtectionStatus+0x10e>
    {
       ProtectedPAGE|= FLASHIF_PROTECTION_WRPENABLED;
 8000a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }   
  }  
  
  if(OptionsBytesStruct4.WRPEndOffset > OptionsBytesStruct4.WRPStartOffset)
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d90e      	bls.n	8000abc <FLASH_If_GetWriteProtectionStatus+0x134>
  {
    /* check if area is inside the WRP Range */ 
    if((OptionsBytesStruct4.WRPStartOffset * FLASH_PAGE_SIZE + FLASH_BASE + FLASH_PAGE_SIZE * FLASH_PAGE_NBPERBANK) >= APPLICATION_ADDRESS)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000aa4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000aa8:	02db      	lsls	r3, r3, #11
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <FLASH_If_GetWriteProtectionStatus+0x158>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d905      	bls.n	8000abc <FLASH_If_GetWriteProtectionStatus+0x134>
    {
       ProtectedPAGE|= FLASHIF_PROTECTION_WRPENABLED;
 8000ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }   
  }
  
  if(OptionsBytesStruct4.RDPLevel == 1)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d105      	bne.n	8000ace <FLASH_If_GetWriteProtectionStatus+0x146>
  {
    ProtectedPAGE|= FLASHIF_PROTECTION_RDPENABLED;
 8000ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
    
  return ProtectedPAGE;
 8000ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	37a8      	adds	r7, #168	@ 0xa8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08080000 	.word	0x08080000
 8000ae0:	0807ffff 	.word	0x0807ffff

08000ae4 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  FLASH_OBProgramInitTypeDef OptionsBytesStruct1;
  HAL_StatusTypeDef retr;
  
  /* Unlock the Flash to enable the flash control register access *************/
  retr = HAL_FLASH_Unlock();
 8000aec:	f001 fc90 	bl	8002410 <HAL_FLASH_Unlock>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /* Unlock the Options Bytes *************************************************/
  retr|= HAL_FLASH_OB_Unlock();
 8000af6:	f001 fcbd 	bl	8002474 <HAL_FLASH_OB_Unlock>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b02:	4313      	orrs	r3, r2
 8000b04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  
  OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
  OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  if( protectionstate == FLASHIF_WRP_ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d104      	bne.n	8000b20 <FLASH_If_WriteProtectionConfig+0x3c>
  {
    /* Enable the WRP protection for all flash BANK1 */
    OptionsBytesStruct1.WRPEndOffset = FLASH_PAGE_NBPERBANK - 1;
 8000b16:	23ff      	movs	r3, #255	@ 0xff
 8000b18:	61bb      	str	r3, [r7, #24]
    OptionsBytesStruct1.WRPStartOffset = 0x00;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e003      	b.n	8000b28 <FLASH_If_WriteProtectionConfig+0x44>
  }
  else
  {
    /* Remove all WRP protection */
    OptionsBytesStruct1.WRPEndOffset = 0x00;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
    OptionsBytesStruct1.WRPStartOffset = 0xFF;
 8000b24:	23ff      	movs	r3, #255	@ 0xff
 8000b26:	617b      	str	r3, [r7, #20]
  }
  retr|= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fe1d 	bl	800276c <HAL_FLASHEx_OBProgram>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461a      	mov	r2, r3
 8000b36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  
  OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
  OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAB;
 8000b44:	2301      	movs	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
  OptionsBytesStruct1.WRPEndOffset = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  OptionsBytesStruct1.WRPStartOffset = 0xFF;
 8000b4c:	23ff      	movs	r3, #255	@ 0xff
 8000b4e:	617b      	str	r3, [r7, #20]
  retr|= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fe09 	bl	800276c <HAL_FLASHEx_OBProgram>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b62:	4313      	orrs	r3, r2
 8000b64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    
  OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
  OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK2_AREAA;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
  if( protectionstate == FLASHIF_WRP_ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d104      	bne.n	8000b80 <FLASH_If_WriteProtectionConfig+0x9c>
  {
    /* Enable the WRP protection for all flash BANK1 */
    OptionsBytesStruct1.WRPEndOffset = FLASH_PAGE_NBPERBANK - 1;
 8000b76:	23ff      	movs	r3, #255	@ 0xff
 8000b78:	61bb      	str	r3, [r7, #24]
    OptionsBytesStruct1.WRPStartOffset = 0x00;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e003      	b.n	8000b88 <FLASH_If_WriteProtectionConfig+0xa4>
  }
  else
  {
    /* Remove all WRP protection */
    OptionsBytesStruct1.WRPEndOffset = 0x00;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
    OptionsBytesStruct1.WRPStartOffset = 0xFF;
 8000b84:	23ff      	movs	r3, #255	@ 0xff
 8000b86:	617b      	str	r3, [r7, #20]
  }
  retr|= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fded 	bl	800276c <HAL_FLASHEx_OBProgram>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  
  OptionsBytesStruct1.RDPLevel = OB_RDP_LEVEL_0;
 8000ba0:	23aa      	movs	r3, #170	@ 0xaa
 8000ba2:	61fb      	str	r3, [r7, #28]
  OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
  OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK2_AREAB;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	613b      	str	r3, [r7, #16]
  OptionsBytesStruct1.WRPEndOffset = 0x00;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  OptionsBytesStruct1.WRPStartOffset = 0xFF;
 8000bb0:	23ff      	movs	r3, #255	@ 0xff
 8000bb2:	617b      	str	r3, [r7, #20]
  retr|= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fdd7 	bl	800276c <HAL_FLASHEx_OBProgram>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  
  return (retr == HAL_OK ? FLASHIF_OK: FLASHIF_PROTECTION_ERRROR);
 8000bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <FLASH_If_WriteProtectionConfig+0xf4>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e000      	b.n	8000bda <FLASH_If_WriteProtectionConfig+0xf6>
 8000bd8:	2304      	movs	r3, #4
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3738      	adds	r7, #56	@ 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* STM32L4xx HAL library initialization */
  HAL_Init();
 8000bea:	f001 f81e 	bl	8001c2a <HAL_Init>

  /* Configure the system clock to 80 MHz */
  SystemClock_Config();
 8000bee:	f000 f84d 	bl	8000c8c <SystemClock_Config>
  /* Initialize LED and Button */
  void LED_Init(void);
  void Button_Init(void);

  /* Test if Button (PC13) is pressed */
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000bf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf6:	481e      	ldr	r0, [pc, #120]	@ (8000c70 <main+0x8c>)
 8000bf8:	f002 fc02 	bl	8003400 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d118      	bne.n	8000c34 <main+0x50>
  {
    /* Initialize Flash */
    FLASH_If_Init();
 8000c02:	f7ff fdff 	bl	8000804 <FLASH_If_Init>
    /* Execute the IAP driver in order to reprogram the Flash */
    IAP_Init();
 8000c06:	f000 f893 	bl	8000d30 <IAP_Init>
    /* Display main menu */
    Main_Menu();
 8000c0a:	f000 f991 	bl	8000f30 <Main_Menu>

    /* Blink LED (PB7) */
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000c0e:	e008      	b.n	8000c22 <main+0x3e>
    {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c14:	4817      	ldr	r0, [pc, #92]	@ (8000c74 <main+0x90>)
 8000c16:	f002 fc0b 	bl	8003430 <HAL_GPIO_TogglePin>
      HAL_Delay(500); // Delay 500 ms
 8000c1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c1e:	f001 f879 	bl	8001d14 <HAL_Delay>
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000c22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c26:	4812      	ldr	r0, [pc, #72]	@ (8000c70 <main+0x8c>)
 8000c28:	f002 fbea 	bl	8003400 <HAL_GPIO_ReadPin>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d0ee      	beq.n	8000c10 <main+0x2c>
 8000c32:	e01a      	b.n	8000c6a <main+0x86>
    }
  }
  else
  {
    /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <main+0x94>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <main+0x98>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c40:	d113      	bne.n	8000c6a <main+0x86>
    {
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <main+0x9c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <main+0xa0>)
 8000c48:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <main+0xa0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <main+0xa4>)
 8000c52:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <main+0x94>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f383 8808 	msr	MSP, r3
}
 8000c60:	bf00      	nop
      JumpToApplication();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <main+0xa4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4798      	blx	r3
    }
  }

  while (1)
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	e7fd      	b.n	8000c6a <main+0x86>
 8000c6e:	bf00      	nop
 8000c70:	48000800 	.word	0x48000800
 8000c74:	48000400 	.word	0x48000400
 8000c78:	08080000 	.word	0x08080000
 8000c7c:	2ffe0000 	.word	0x2ffe0000
 8000c80:	08080004 	.word	0x08080004
 8000c84:	200000f8 	.word	0x200000f8
 8000c88:	200000f4 	.word	0x200000f4

08000c8c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b096      	sub	sp, #88	@ 0x58
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2244      	movs	r2, #68	@ 0x44
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 fdd1 	bl	8005842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cb2:	f002 fbe5 	bl	8003480 <HAL_PWREx_ControlVoltageScaling>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cbc:	f000 f89e 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2340      	movs	r3, #64	@ 0x40
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fc2c 	bl	800354c <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cfa:	f000 f87f 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2303      	movs	r3, #3
 8000d04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	2104      	movs	r1, #4
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 f831 	bl	8003d80 <HAL_RCC_ClockConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d24:	f000 f86a 	bl	8000dfc <Error_Handler>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3758      	adds	r7, #88	@ 0x58
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <IAP_Init>:
  * @brief  Initialize the IAP: Configure USART.
  * @param  None
  * @retval None
  */
void IAP_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  hlpuart1.Instance = LPUART1;
 8000d36:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <IAP_Init+0xb8>)
 8000d38:	4a2c      	ldr	r2, [pc, #176]	@ (8000dec <IAP_Init+0xbc>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <IAP_Init+0xb8>)
 8000d3e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d42:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d44:	4b28      	ldr	r3, [pc, #160]	@ (8000de8 <IAP_Init+0xb8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <IAP_Init+0xb8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d50:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <IAP_Init+0xb8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <IAP_Init+0xb8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <IAP_Init+0xb8>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000d62:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <IAP_Init+0xb8>)
 8000d64:	2210      	movs	r2, #16
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <IAP_Init+0xb8>)
 8000d6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d6e:	639a      	str	r2, [r3, #56]	@ 0x38

  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d70:	481d      	ldr	r0, [pc, #116]	@ (8000de8 <IAP_Init+0xb8>)
 8000d72:	f003 fef3 	bl	8004b5c <HAL_UART_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <IAP_Init+0x50>
  {
    /* Initialization Error */
    Error_Handler();
 8000d7c:	f000 f83e 	bl	8000dfc <Error_Handler>
  }

  __HAL_RCC_CRC_CLK_ENABLE();
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <IAP_Init+0xc0>)
 8000d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d84:	4a1a      	ldr	r2, [pc, #104]	@ (8000df0 <IAP_Init+0xc0>)
 8000d86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d8a:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d8c:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <IAP_Init+0xc0>)
 8000d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /*##-2- Configure the CRC peripheral #####################################*/
  CrcHandle.Instance = CRC;
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <IAP_Init+0xc4>)
 8000d9a:	4a17      	ldr	r2, [pc, #92]	@ (8000df8 <IAP_Init+0xc8>)
 8000d9c:	601a      	str	r2, [r3, #0]

  /* The CRC-16-CCIT polynomial is used */
  CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <IAP_Init+0xc4>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	711a      	strb	r2, [r3, #4]
  CrcHandle.Init.GeneratingPolynomial    = 0x1021;
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <IAP_Init+0xc4>)
 8000da6:	f241 0221 	movw	r2, #4129	@ 0x1021
 8000daa:	609a      	str	r2, [r3, #8]
  CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <IAP_Init+0xc4>)
 8000dae:	2208      	movs	r2, #8
 8000db0:	60da      	str	r2, [r3, #12]

  /* The zero init value is used */
  CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <IAP_Init+0xc4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	715a      	strb	r2, [r3, #5]
  CrcHandle.Init.InitValue               = 0;
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <IAP_Init+0xc4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]

  /* The input data are not inverted */
  CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <IAP_Init+0xc4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <IAP_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]

  /* The input data are 32-bit long words */
  CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <IAP_Init+0xc4>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	621a      	str	r2, [r3, #32]

  if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 8000dd0:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <IAP_Init+0xc4>)
 8000dd2:	f001 f8a9 	bl	8001f28 <HAL_CRC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <IAP_Init+0xb0>
  {

    while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <IAP_Init+0xac>
    {}
  }
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000048 	.word	0x20000048
 8000dec:	40008000 	.word	0x40008000
 8000df0:	40021000 	.word	0x40021000
 8000df4:	200000d0 	.word	0x200000d0
 8000df8:	40023000 	.word	0x40023000

08000dfc <Error_Handler>:

void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  while(1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x4>

08000e04 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8000e1a:	4821      	ldr	r0, [pc, #132]	@ (8000ea0 <SerialDownload+0x9c>)
 8000e1c:	f7ff fcbc 	bl	8000798 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8000e20:	463b      	mov	r3, r7
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fbf2 	bl	800160c <Ymodem_Receive>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d119      	bne.n	8000e66 <SerialDownload+0x62>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000e32:	481c      	ldr	r0, [pc, #112]	@ (8000ea4 <SerialDownload+0xa0>)
 8000e34:	f7ff fcb0 	bl	8000798 <Serial_PutString>
    Serial_PutString(aFileName);
 8000e38:	481b      	ldr	r0, [pc, #108]	@ (8000ea8 <SerialDownload+0xa4>)
 8000e3a:	f7ff fcad 	bl	8000798 <Serial_PutString>
    Int2Str(number, size);
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb67 	bl	8000518 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8000e4a:	4818      	ldr	r0, [pc, #96]	@ (8000eac <SerialDownload+0xa8>)
 8000e4c:	f7ff fca4 	bl	8000798 <Serial_PutString>
    Serial_PutString(number);
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fca0 	bl	8000798 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8000e58:	4815      	ldr	r0, [pc, #84]	@ (8000eb0 <SerialDownload+0xac>)
 8000e5a:	f7ff fc9d 	bl	8000798 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8000e5e:	4815      	ldr	r0, [pc, #84]	@ (8000eb4 <SerialDownload+0xb0>)
 8000e60:	f7ff fc9a 	bl	8000798 <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 8000e64:	e017      	b.n	8000e96 <SerialDownload+0x92>
  else if (result == COM_LIMIT)
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d103      	bne.n	8000e74 <SerialDownload+0x70>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8000e6c:	4812      	ldr	r0, [pc, #72]	@ (8000eb8 <SerialDownload+0xb4>)
 8000e6e:	f7ff fc93 	bl	8000798 <Serial_PutString>
}
 8000e72:	e010      	b.n	8000e96 <SerialDownload+0x92>
  else if (result == COM_DATA)
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d103      	bne.n	8000e82 <SerialDownload+0x7e>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8000e7a:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <SerialDownload+0xb8>)
 8000e7c:	f7ff fc8c 	bl	8000798 <Serial_PutString>
}
 8000e80:	e009      	b.n	8000e96 <SerialDownload+0x92>
  else if (result == COM_ABORT)
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d103      	bne.n	8000e90 <SerialDownload+0x8c>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <SerialDownload+0xbc>)
 8000e8a:	f7ff fc85 	bl	8000798 <Serial_PutString>
}
 8000e8e:	e002      	b.n	8000e96 <SerialDownload+0x92>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <SerialDownload+0xc0>)
 8000e92:	f7ff fc81 	bl	8000798 <Serial_PutString>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	080058b4 	.word	0x080058b4
 8000ea4:	080058f0 	.word	0x080058f0
 8000ea8:	20000100 	.word	0x20000100
 8000eac:	08005944 	.word	0x08005944
 8000eb0:	08005950 	.word	0x08005950
 8000eb4:	0800595c 	.word	0x0800595c
 8000eb8:	08005974 	.word	0x08005974
 8000ebc:	080059b4 	.word	0x080059b4
 8000ec0:	080059d0 	.word	0x080059d0
 8000ec4:	080059e8 	.word	0x080059e8

08000ec8 <SerialUpload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */
void SerialUpload(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]

  Serial_PutString((uint8_t *)"\n\n\rSelect Receive File\n\r");
 8000ed2:	4811      	ldr	r0, [pc, #68]	@ (8000f18 <SerialUpload+0x50>)
 8000ed4:	f7ff fc60 	bl	8000798 <Serial_PutString>

  HAL_UART_Receive(&hlpuart1, &status, 1, RX_TIMEOUT);
 8000ed8:	1df9      	adds	r1, r7, #7
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ede:	2201      	movs	r2, #1
 8000ee0:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <SerialUpload+0x54>)
 8000ee2:	f003 ff12 	bl	8004d0a <HAL_UART_Receive>
  if ( status == CRC16)
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b43      	cmp	r3, #67	@ 0x43
 8000eea:	d111      	bne.n	8000f10 <SerialUpload+0x48>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8000eec:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000ef0:	490b      	ldr	r1, [pc, #44]	@ (8000f20 <SerialUpload+0x58>)
 8000ef2:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <SerialUpload+0x5c>)
 8000ef4:	f000 fcac 	bl	8001850 <Ymodem_Transmit>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]

    if (status != 0)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <SerialUpload+0x42>
    {
      Serial_PutString((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <SerialUpload+0x60>)
 8000f04:	f7ff fc48 	bl	8000798 <Serial_PutString>
    else
    {
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
    }
  }
}
 8000f08:	e002      	b.n	8000f10 <SerialUpload+0x48>
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8000f0a:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <SerialUpload+0x64>)
 8000f0c:	f7ff fc44 	bl	8000798 <Serial_PutString>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08005a08 	.word	0x08005a08
 8000f1c:	20000048 	.word	0x20000048
 8000f20:	08005a24 	.word	0x08005a24
 8000f24:	08080000 	.word	0x08080000
 8000f28:	08005a3c 	.word	0x08005a3c
 8000f2c:	08005a68 	.word	0x08005a68

08000f30 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  uint8_t key = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	70fb      	strb	r3, [r7, #3]

  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8000f3a:	485d      	ldr	r0, [pc, #372]	@ (80010b0 <Main_Menu+0x180>)
 8000f3c:	f7ff fc2c 	bl	8000798 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=              (C) COPYRIGHT 2015 STMicroelectronics                 =");
 8000f40:	485c      	ldr	r0, [pc, #368]	@ (80010b4 <Main_Menu+0x184>)
 8000f42:	f7ff fc29 	bl	8000798 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 8000f46:	485c      	ldr	r0, [pc, #368]	@ (80010b8 <Main_Menu+0x188>)
 8000f48:	f7ff fc26 	bl	8000798 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=  STM32L4xx In-Application Programming Application  (Version 1.0.0) =");
 8000f4c:	485b      	ldr	r0, [pc, #364]	@ (80010bc <Main_Menu+0x18c>)
 8000f4e:	f7ff fc23 	bl	8000798 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 8000f52:	4859      	ldr	r0, [pc, #356]	@ (80010b8 <Main_Menu+0x188>)
 8000f54:	f7ff fc20 	bl	8000798 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                   By MCD Application Team          =");
 8000f58:	4859      	ldr	r0, [pc, #356]	@ (80010c0 <Main_Menu+0x190>)
 8000f5a:	f7ff fc1d 	bl	8000798 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8000f5e:	4854      	ldr	r0, [pc, #336]	@ (80010b0 <Main_Menu+0x180>)
 8000f60:	f7ff fc1a 	bl	8000798 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n\r\n");
 8000f64:	4857      	ldr	r0, [pc, #348]	@ (80010c4 <Main_Menu+0x194>)
 8000f66:	f7ff fc17 	bl	8000798 <Serial_PutString>

  /* Test if any sector of Flash memory where user application will be loaded is write protected */
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8000f6a:	f7ff fd0d 	bl	8000988 <FLASH_If_GetWriteProtectionStatus>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a55      	ldr	r2, [pc, #340]	@ (80010c8 <Main_Menu+0x198>)
 8000f72:	6013      	str	r3, [r2, #0]

  while (1)
  {

    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8000f74:	4855      	ldr	r0, [pc, #340]	@ (80010cc <Main_Menu+0x19c>)
 8000f76:	f7ff fc0f 	bl	8000798 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 8000f7a:	4855      	ldr	r0, [pc, #340]	@ (80010d0 <Main_Menu+0x1a0>)
 8000f7c:	f7ff fc0c 	bl	8000798 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8000f80:	4854      	ldr	r0, [pc, #336]	@ (80010d4 <Main_Menu+0x1a4>)
 8000f82:	f7ff fc09 	bl	8000798 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 8000f86:	4854      	ldr	r0, [pc, #336]	@ (80010d8 <Main_Menu+0x1a8>)
 8000f88:	f7ff fc06 	bl	8000798 <Serial_PutString>


    if(FlashProtection != FLASHIF_PROTECTION_NONE)
 8000f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80010c8 <Main_Menu+0x198>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d010      	beq.n	8000fb6 <Main_Menu+0x86>
    {
      Serial_PutString((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 8000f94:	4851      	ldr	r0, [pc, #324]	@ (80010dc <Main_Menu+0x1ac>)
 8000f96:	f7ff fbff 	bl	8000798 <Serial_PutString>
      if((FlashProtection & (FLASHIF_PROTECTION_PCROPENABLED | FLASHIF_PROTECTION_RDPENABLED)) != 0x0)
 8000f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80010c8 <Main_Menu+0x198>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0305 	and.w	r3, r3, #5
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00a      	beq.n	8000fbc <Main_Menu+0x8c>
      {
        Serial_PutString((uint8_t *)"  The write protection disable will erase all the flash\r\n");
 8000fa6:	484e      	ldr	r0, [pc, #312]	@ (80010e0 <Main_Menu+0x1b0>)
 8000fa8:	f7ff fbf6 	bl	8000798 <Serial_PutString>
        Serial_PutString((uint8_t *)"  Please use STlink utility to disable the protection  \r\n\n");
 8000fac:	484d      	ldr	r0, [pc, #308]	@ (80010e4 <Main_Menu+0x1b4>)
 8000fae:	f7ff fbf3 	bl	8000798 <Serial_PutString>
        while(1);
 8000fb2:	bf00      	nop
 8000fb4:	e7fd      	b.n	8000fb2 <Main_Menu+0x82>
      }
    }
    else
    {
      Serial_PutString((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8000fb6:	484c      	ldr	r0, [pc, #304]	@ (80010e8 <Main_Menu+0x1b8>)
 8000fb8:	f7ff fbee 	bl	8000798 <Serial_PutString>
    }
    Serial_PutString((uint8_t *)"==========================================================\r\n\n");
 8000fbc:	484b      	ldr	r0, [pc, #300]	@ (80010ec <Main_Menu+0x1bc>)
 8000fbe:	f7ff fbeb 	bl	8000798 <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&hlpuart1);
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <Main_Menu+0x1c0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	8b1b      	ldrh	r3, [r3, #24]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b49      	ldr	r3, [pc, #292]	@ (80010f0 <Main_Menu+0x1c0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0208 	orr.w	r2, r2, #8
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	831a      	strh	r2, [r3, #24]
 8000fd6:	4b46      	ldr	r3, [pc, #280]	@ (80010f0 <Main_Menu+0x1c0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	8b1b      	ldrh	r3, [r3, #24]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b44      	ldr	r3, [pc, #272]	@ (80010f0 <Main_Menu+0x1c0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0210 	orr.w	r2, r2, #16
 8000fe6:	b292      	uxth	r2, r2
 8000fe8:	831a      	strh	r2, [r3, #24]
	
    /* Receive key */
    HAL_UART_Receive(&hlpuart1, &key, 1, RX_TIMEOUT);
 8000fea:	1cf9      	adds	r1, r7, #3
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	483f      	ldr	r0, [pc, #252]	@ (80010f0 <Main_Menu+0x1c0>)
 8000ff4:	f003 fe89 	bl	8004d0a <HAL_UART_Receive>

    switch (key)
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	3b31      	subs	r3, #49	@ 0x31
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d852      	bhi.n	80010a6 <Main_Menu+0x176>
 8001000:	a201      	add	r2, pc, #4	@ (adr r2, 8001008 <Main_Menu+0xd8>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001019 	.word	0x08001019
 800100c:	0800101f 	.word	0x0800101f
 8001010:	08001025 	.word	0x08001025
 8001014:	08001053 	.word	0x08001053
    {
    case '1' :
      /* Download user application in the Flash */
      SerialDownload();
 8001018:	f7ff fef4 	bl	8000e04 <SerialDownload>
      break;
 800101c:	e047      	b.n	80010ae <Main_Menu+0x17e>
    case '2' :
      /* Upload user application from the Flash */
      SerialUpload();
 800101e:	f7ff ff53 	bl	8000ec8 <SerialUpload>
      break;
 8001022:	e044      	b.n	80010ae <Main_Menu+0x17e>
    case '3' :
      Serial_PutString((uint8_t *)"Start program execution......\r\n\n");
 8001024:	4833      	ldr	r0, [pc, #204]	@ (80010f4 <Main_Menu+0x1c4>)
 8001026:	f7ff fbb7 	bl	8000798 <Serial_PutString>
      /* execute the new program */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800102a:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <Main_Menu+0x1c8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a33      	ldr	r2, [pc, #204]	@ (80010fc <Main_Menu+0x1cc>)
 8001030:	6013      	str	r3, [r2, #0]
      /* Jump to user application */
      JumpToApplication = (pFunction) JumpAddress;
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <Main_Menu+0x1cc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <Main_Menu+0x1d0>)
 800103a:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 800103c:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <Main_Menu+0x1d4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f383 8808 	msr	MSP, r3
}
 8001048:	bf00      	nop
      JumpToApplication();
 800104a:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <Main_Menu+0x1d0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4798      	blx	r3
      break;
 8001050:	e02d      	b.n	80010ae <Main_Menu+0x17e>
    case '4' :
      if (FlashProtection != FLASHIF_PROTECTION_NONE)
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <Main_Menu+0x198>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d012      	beq.n	8001080 <Main_Menu+0x150>
      {
        /* Disable the write protection */
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff fd42 	bl	8000ae4 <FLASH_If_WriteProtectionConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d108      	bne.n	8001078 <Main_Menu+0x148>
        {
          Serial_PutString((uint8_t *)"Write Protection disabled...\r\n");
 8001066:	4828      	ldr	r0, [pc, #160]	@ (8001108 <Main_Menu+0x1d8>)
 8001068:	f7ff fb96 	bl	8000798 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 800106c:	4827      	ldr	r0, [pc, #156]	@ (800110c <Main_Menu+0x1dc>)
 800106e:	f7ff fb93 	bl	8000798 <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 8001072:	f001 fa1b 	bl	80024ac <HAL_FLASH_OB_Launch>
        else
        {
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
        }
      }
      break;
 8001076:	e01a      	b.n	80010ae <Main_Menu+0x17e>
          Serial_PutString((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 8001078:	4825      	ldr	r0, [pc, #148]	@ (8001110 <Main_Menu+0x1e0>)
 800107a:	f7ff fb8d 	bl	8000798 <Serial_PutString>
      break;
 800107e:	e016      	b.n	80010ae <Main_Menu+0x17e>
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fd2f 	bl	8000ae4 <FLASH_If_WriteProtectionConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d108      	bne.n	800109e <Main_Menu+0x16e>
          Serial_PutString((uint8_t *)"Write Protection enabled...\r\n");
 800108c:	4821      	ldr	r0, [pc, #132]	@ (8001114 <Main_Menu+0x1e4>)
 800108e:	f7ff fb83 	bl	8000798 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 8001092:	481e      	ldr	r0, [pc, #120]	@ (800110c <Main_Menu+0x1dc>)
 8001094:	f7ff fb80 	bl	8000798 <Serial_PutString>
          HAL_FLASH_OB_Launch();
 8001098:	f001 fa08 	bl	80024ac <HAL_FLASH_OB_Launch>
      break;
 800109c:	e007      	b.n	80010ae <Main_Menu+0x17e>
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
 800109e:	481e      	ldr	r0, [pc, #120]	@ (8001118 <Main_Menu+0x1e8>)
 80010a0:	f7ff fb7a 	bl	8000798 <Serial_PutString>
      break;
 80010a4:	e003      	b.n	80010ae <Main_Menu+0x17e>
	default:
	Serial_PutString((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 80010a6:	481d      	ldr	r0, [pc, #116]	@ (800111c <Main_Menu+0x1ec>)
 80010a8:	f7ff fb76 	bl	8000798 <Serial_PutString>
	break;
 80010ac:	bf00      	nop
    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 80010ae:	e761      	b.n	8000f74 <Main_Menu+0x44>
 80010b0:	08005a88 	.word	0x08005a88
 80010b4:	08005ad4 	.word	0x08005ad4
 80010b8:	08005b20 	.word	0x08005b20
 80010bc:	08005b6c 	.word	0x08005b6c
 80010c0:	08005bb8 	.word	0x08005bb8
 80010c4:	08005c04 	.word	0x08005c04
 80010c8:	200000fc 	.word	0x200000fc
 80010cc:	08005c0c 	.word	0x08005c0c
 80010d0:	08005c4c 	.word	0x08005c4c
 80010d4:	08005c8c 	.word	0x08005c8c
 80010d8:	08005ccc 	.word	0x08005ccc
 80010dc:	08005d0c 	.word	0x08005d0c
 80010e0:	08005d4c 	.word	0x08005d4c
 80010e4:	08005d88 	.word	0x08005d88
 80010e8:	08005dc4 	.word	0x08005dc4
 80010ec:	08005e04 	.word	0x08005e04
 80010f0:	20000048 	.word	0x20000048
 80010f4:	08005e44 	.word	0x08005e44
 80010f8:	08080004 	.word	0x08080004
 80010fc:	200000f8 	.word	0x200000f8
 8001100:	200000f4 	.word	0x200000f4
 8001104:	08080000 	.word	0x08080000
 8001108:	08005e68 	.word	0x08005e68
 800110c:	08005e88 	.word	0x08005e88
 8001110:	08005ea8 	.word	0x08005ea8
 8001114:	08005ed8 	.word	0x08005ed8
 8001118:	08005ef8 	.word	0x08005ef8
 800111c:	08005f24 	.word	0x08005f24

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	@ 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_CRC_MspInit+0x38>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10b      	bne.n	8001192 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_CRC_MspInit+0x3c>)
 800117c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <HAL_CRC_MspInit+0x3c>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001184:	6493      	str	r3, [r2, #72]	@ 0x48
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_CRC_MspInit+0x3c>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023000 	.word	0x40023000
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0ac      	sub	sp, #176	@ 0xb0
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	228c      	movs	r2, #140	@ 0x8c
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 fb3a 	bl	8005842 <memset>
  if(huart->Instance==LPUART1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a22      	ldr	r2, [pc, #136]	@ (800125c <HAL_UART_MspInit+0xb4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d13d      	bne.n	8001254 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011d8:	2320      	movs	r3, #32
 80011da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011dc:	2300      	movs	r3, #0
 80011de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 ffef 	bl	80041c8 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f0:	f7ff fe04 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_UART_MspInit+0xb8>)
 80011f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f8:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_UART_MspInit+0xb8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_UART_MspInit+0xb8>)
 8001202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_UART_MspInit+0xb8>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <HAL_UART_MspInit+0xb8>)
 8001212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0xb8>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001224:	f002 f982 	bl	800352c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001228:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800122c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001242:	2308      	movs	r3, #8
 8001244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001248:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_UART_MspInit+0xbc>)
 8001250:	f001 ff44 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001254:	bf00      	nop
 8001256:	37b0      	adds	r7, #176	@ 0xb0
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40008000 	.word	0x40008000
 8001260:	40021000 	.word	0x40021000
 8001264:	48001800 	.word	0x48001800

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 fd09 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&hlpuart1, &char1, 1, timeout);
 8001302:	f107 0113 	add.w	r1, r7, #19
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	485d      	ldr	r0, [pc, #372]	@ (8001480 <ReceivePacket+0x194>)
 800130c:	f003 fcfd 	bl	8004d0a <HAL_UART_Receive>
 8001310:	4603      	mov	r3, r0
 8001312:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 8001314:	7efb      	ldrb	r3, [r7, #27]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 80aa 	bne.w	8001470 <ReceivePacket+0x184>
  {
    switch (char1)
 800131c:	7cfb      	ldrb	r3, [r7, #19]
 800131e:	2b61      	cmp	r3, #97	@ 0x61
 8001320:	d059      	beq.n	80013d6 <ReceivePacket+0xea>
 8001322:	2b61      	cmp	r3, #97	@ 0x61
 8001324:	dc5a      	bgt.n	80013dc <ReceivePacket+0xf0>
 8001326:	2b18      	cmp	r3, #24
 8001328:	dc38      	bgt.n	800139c <ReceivePacket+0xb0>
 800132a:	2b00      	cmp	r3, #0
 800132c:	dd56      	ble.n	80013dc <ReceivePacket+0xf0>
 800132e:	3b01      	subs	r3, #1
 8001330:	2b17      	cmp	r3, #23
 8001332:	d853      	bhi.n	80013dc <ReceivePacket+0xf0>
 8001334:	a201      	add	r2, pc, #4	@ (adr r2, 800133c <ReceivePacket+0x50>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	080013a3 	.word	0x080013a3
 8001340:	080013a9 	.word	0x080013a9
 8001344:	080013dd 	.word	0x080013dd
 8001348:	080013e3 	.word	0x080013e3
 800134c:	080013dd 	.word	0x080013dd
 8001350:	080013dd 	.word	0x080013dd
 8001354:	080013dd 	.word	0x080013dd
 8001358:	080013dd 	.word	0x080013dd
 800135c:	080013dd 	.word	0x080013dd
 8001360:	080013dd 	.word	0x080013dd
 8001364:	080013dd 	.word	0x080013dd
 8001368:	080013dd 	.word	0x080013dd
 800136c:	080013dd 	.word	0x080013dd
 8001370:	080013dd 	.word	0x080013dd
 8001374:	080013dd 	.word	0x080013dd
 8001378:	080013dd 	.word	0x080013dd
 800137c:	080013dd 	.word	0x080013dd
 8001380:	080013dd 	.word	0x080013dd
 8001384:	080013dd 	.word	0x080013dd
 8001388:	080013dd 	.word	0x080013dd
 800138c:	080013dd 	.word	0x080013dd
 8001390:	080013dd 	.word	0x080013dd
 8001394:	080013dd 	.word	0x080013dd
 8001398:	080013b1 	.word	0x080013b1
 800139c:	2b41      	cmp	r3, #65	@ 0x41
 800139e:	d01a      	beq.n	80013d6 <ReceivePacket+0xea>
 80013a0:	e01c      	b.n	80013dc <ReceivePacket+0xf0>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	61fb      	str	r3, [r7, #28]
        break;
 80013a6:	e01d      	b.n	80013e4 <ReceivePacket+0xf8>
      case STX:
        packet_size = PACKET_1K_SIZE;
 80013a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ac:	61fb      	str	r3, [r7, #28]
        break;
 80013ae:	e019      	b.n	80013e4 <ReceivePacket+0xf8>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&hlpuart1, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 80013b0:	f107 0113 	add.w	r1, r7, #19
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	4831      	ldr	r0, [pc, #196]	@ (8001480 <ReceivePacket+0x194>)
 80013ba:	f003 fca6 	bl	8004d0a <HAL_UART_Receive>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <ReceivePacket+0xe4>
 80013c4:	7cfb      	ldrb	r3, [r7, #19]
 80013c6:	2b18      	cmp	r3, #24
 80013c8:	d102      	bne.n	80013d0 <ReceivePacket+0xe4>
        {
          packet_size = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 80013ce:	e009      	b.n	80013e4 <ReceivePacket+0xf8>
          status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	76fb      	strb	r3, [r7, #27]
        break;
 80013d4:	e006      	b.n	80013e4 <ReceivePacket+0xf8>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 80013d6:	2302      	movs	r3, #2
 80013d8:	76fb      	strb	r3, [r7, #27]
        break;
 80013da:	e003      	b.n	80013e4 <ReceivePacket+0xf8>
      default:
        status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	76fb      	strb	r3, [r7, #27]
        break;
 80013e0:	e000      	b.n	80013e4 <ReceivePacket+0xf8>
        break;
 80013e2:	bf00      	nop
    }
    *p_data = char1;
 80013e4:	7cfa      	ldrb	r2, [r7, #19]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80013ee:	d93f      	bls.n	8001470 <ReceivePacket+0x184>
    {
      status = HAL_UART_Receive(&hlpuart1, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1c99      	adds	r1, r3, #2
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3304      	adds	r3, #4
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4820      	ldr	r0, [pc, #128]	@ (8001480 <ReceivePacket+0x194>)
 8001400:	f003 fc83 	bl	8004d0a <HAL_UART_Receive>
 8001404:	4603      	mov	r3, r0
 8001406:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8001408:	7efb      	ldrb	r3, [r7, #27]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d12e      	bne.n	800146c <ReceivePacket+0x180>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3302      	adds	r3, #2
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3303      	adds	r3, #3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	43db      	mvns	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	429a      	cmp	r2, r3
 8001420:	d004      	beq.n	800142c <ReceivePacket+0x140>
        {
          packet_size = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	76fb      	strb	r3, [r7, #27]
 800142a:	e021      	b.n	8001470 <ReceivePacket+0x184>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3304      	adds	r3, #4
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3305      	adds	r3, #5
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	4413      	add	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
          if (HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3304      	adds	r3, #4
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	4619      	mov	r1, r3
 8001454:	480b      	ldr	r0, [pc, #44]	@ (8001484 <ReceivePacket+0x198>)
 8001456:	f000 fdcb 	bl	8001ff0 <HAL_CRC_Calculate>
 800145a:	4602      	mov	r2, r0
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4293      	cmp	r3, r2
 8001460:	d006      	beq.n	8001470 <ReceivePacket+0x184>
          {
            packet_size = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	76fb      	strb	r3, [r7, #27]
 800146a:	e001      	b.n	8001470 <ReceivePacket+0x184>
          }
        }
      }
      else
      {
        packet_size = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	601a      	str	r2, [r3, #0]
  return status;
 8001476:	7efb      	ldrb	r3, [r7, #27]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000048 	.word	0x20000048
 8001484:	200000d0 	.word	0x200000d0

08001488 <PrepareIntialPacket>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */
static void PrepareIntialPacket(uint8_t *p_data, const uint8_t *p_file_name, uint32_t length)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t i, j = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  uint8_t astring[10];

  /* first 3 bytes are constant */
  p_data[PACKET_START_INDEX] = SOH;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3301      	adds	r3, #1
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3302      	adds	r3, #2
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3303      	adds	r3, #3
 80014ac:	22ff      	movs	r2, #255	@ 0xff
 80014ae:	701a      	strb	r2, [r3, #0]

  /* Filename written */
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b4:	e00b      	b.n	80014ce <PrepareIntialPacket+0x46>
  {
    p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	441a      	add	r2, r3
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	3304      	adds	r3, #4
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	440b      	add	r3, r1
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	701a      	strb	r2, [r3, #0]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	3301      	adds	r3, #1
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <PrepareIntialPacket+0x58>
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80014de:	d9ea      	bls.n	80014b6 <PrepareIntialPacket+0x2e>
  }

  p_data[i + PACKET_DATA_INDEX] = 0x00;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	3304      	adds	r3, #4
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]

  /* file size written */
  Int2Str (astring, length);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f810 	bl	8000518 <Int2Str>
  i = i + PACKET_DATA_INDEX + 1;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	3305      	adds	r3, #5
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (astring[j] != '\0')
 80014fe:	e00c      	b.n	800151a <PrepareIntialPacket+0x92>
  {
    p_data[i++] = astring[j++];
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	623a      	str	r2, [r7, #32]
 8001506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001508:	1c51      	adds	r1, r2, #1
 800150a:	6279      	str	r1, [r7, #36]	@ 0x24
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	440a      	add	r2, r1
 8001510:	3328      	adds	r3, #40	@ 0x28
 8001512:	443b      	add	r3, r7
 8001514:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001518:	7013      	strb	r3, [r2, #0]
  while (astring[j] != '\0')
 800151a:	f107 0214 	add.w	r2, r7, #20
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1eb      	bne.n	8001500 <PrepareIntialPacket+0x78>
  }

  /* padding with zeros */
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	e007      	b.n	800153e <PrepareIntialPacket+0xb6>
  {
    p_data[j] = 0;
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	4413      	add	r3, r2
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	3301      	adds	r3, #1
 800153c:	623b      	str	r3, [r7, #32]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	2b83      	cmp	r3, #131	@ 0x83
 8001542:	d9f4      	bls.n	800152e <PrepareIntialPacket+0xa6>
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <PreparePacket>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */
static void PreparePacket(uint8_t *p_source, uint8_t *p_packet, uint8_t pkt_nr, uint32_t size_blk)
{
 800154e:	b480      	push	{r7}
 8001550:	b089      	sub	sp, #36	@ 0x24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_record;
  uint32_t i, size, packet_size;

  /* Make first three packet */
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001564:	d302      	bcc.n	800156c <PreparePacket+0x1e>
 8001566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156a:	e000      	b.n	800156e <PreparePacket+0x20>
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	617b      	str	r3, [r7, #20]
  size = size_blk < packet_size ? size_blk : packet_size;
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	4293      	cmp	r3, r2
 8001576:	bf28      	it	cs
 8001578:	4613      	movcs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
  if (packet_size == PACKET_1K_SIZE)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001582:	d104      	bne.n	800158e <PreparePacket+0x40>
  {
    p_packet[PACKET_START_INDEX] = STX;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3301      	adds	r3, #1
 8001588:	2202      	movs	r2, #2
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e003      	b.n	8001596 <PreparePacket+0x48>
  }
  else
  {
    p_packet[PACKET_START_INDEX] = SOH;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
  }
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3302      	adds	r3, #2
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	701a      	strb	r2, [r3, #0]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3303      	adds	r3, #3
 80015a2:	79fa      	ldrb	r2, [r7, #7]
 80015a4:	43d2      	mvns	r2, r2
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]
  p_record = p_source;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	61fb      	str	r3, [r7, #28]

  /* Filename packet has valid data */
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 80015ae:	2304      	movs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e00a      	b.n	80015ca <PreparePacket+0x7c>
  {
    p_packet[i] = *p_record++;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	61fa      	str	r2, [r7, #28]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	440a      	add	r2, r1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	7013      	strb	r3, [r2, #0]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3301      	adds	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3304      	adds	r3, #4
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3ef      	bcc.n	80015b4 <PreparePacket+0x66>
  }
  if ( size  <= packet_size)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d810      	bhi.n	80015fe <PreparePacket+0xb0>
  {
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	3304      	adds	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	e007      	b.n	80015f4 <PreparePacket+0xa6>
    {
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	221a      	movs	r2, #26
 80015ec:	701a      	strb	r2, [r3, #0]
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3304      	adds	r3, #4
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3f2      	bcc.n	80015e4 <PreparePacket+0x96>
    }
  }
}
 80015fe:	bf00      	nop
 8001600:	3724      	adds	r7, #36	@ 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b092      	sub	sp, #72	@ 0x48
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
 8001618:	2300      	movs	r3, #0
 800161a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001626:	4b85      	ldr	r3, [pc, #532]	@ (800183c <Ymodem_Receive+0x230>)
 8001628:	633b      	str	r3, [r7, #48]	@ 0x30

  while ((session_done == 0) && (result == COM_OK))
 800162a:	e0f9      	b.n	8001820 <Ymodem_Receive+0x214>
  {
    packets_received = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    file_done = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8001636:	e0eb      	b.n	8001810 <Ymodem_Receive+0x204>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001640:	4619      	mov	r1, r3
 8001642:	487f      	ldr	r0, [pc, #508]	@ (8001840 <Ymodem_Receive+0x234>)
 8001644:	f7ff fe52 	bl	80012ec <ReceivePacket>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <Ymodem_Receive+0x4a>
 800164e:	2b02      	cmp	r3, #2
 8001650:	f000 80c0 	beq.w	80017d4 <Ymodem_Receive+0x1c8>
 8001654:	e0c8      	b.n	80017e8 <Ymodem_Receive+0x1dc>
      {
        case HAL_OK:
          errors = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	63bb      	str	r3, [r7, #56]	@ 0x38
          switch (packet_length)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <Ymodem_Receive+0x66>
 8001660:	2b02      	cmp	r3, #2
 8001662:	d10c      	bne.n	800167e <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 8001664:	2006      	movs	r0, #6
 8001666:	f7ff f8b3 	bl	80007d0 <Serial_PutByte>
              result = COM_ABORT;
 800166a:	2302      	movs	r3, #2
 800166c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
              break;
 8001670:	e0af      	b.n	80017d2 <Ymodem_Receive+0x1c6>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 8001672:	2006      	movs	r0, #6
 8001674:	f7ff f8ac 	bl	80007d0 <Serial_PutByte>
              file_done = 1;
 8001678:	2301      	movs	r3, #1
 800167a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 800167c:	e0a9      	b.n	80017d2 <Ymodem_Receive+0x1c6>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 800167e:	4b70      	ldr	r3, [pc, #448]	@ (8001840 <Ymodem_Receive+0x234>)
 8001680:	789b      	ldrb	r3, [r3, #2]
 8001682:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001686:	429a      	cmp	r2, r3
 8001688:	d003      	beq.n	8001692 <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 800168a:	2015      	movs	r0, #21
 800168c:	f7ff f8a0 	bl	80007d0 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 8001690:	e09e      	b.n	80017d0 <Ymodem_Receive+0x1c4>
                if (packets_received == 0)
 8001692:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001696:	2b00      	cmp	r3, #0
 8001698:	d176      	bne.n	8001788 <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800169a:	4b69      	ldr	r3, [pc, #420]	@ (8001840 <Ymodem_Receive+0x234>)
 800169c:	791b      	ldrb	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d06a      	beq.n	8001778 <Ymodem_Receive+0x16c>
                    i = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 80016a6:	4b67      	ldr	r3, [pc, #412]	@ (8001844 <Ymodem_Receive+0x238>)
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80016aa:	e008      	b.n	80016be <Ymodem_Receive+0xb2>
                      aFileName[i++] = *file_ptr++;
 80016ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ae:	1c53      	adds	r3, r2, #1
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016b4:	1c59      	adds	r1, r3, #1
 80016b6:	6479      	str	r1, [r7, #68]	@ 0x44
 80016b8:	7811      	ldrb	r1, [r2, #0]
 80016ba:	4a63      	ldr	r2, [pc, #396]	@ (8001848 <Ymodem_Receive+0x23c>)
 80016bc:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80016be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <Ymodem_Receive+0xc0>
 80016c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80016ca:	d9ef      	bls.n	80016ac <Ymodem_Receive+0xa0>
                    aFileName[i++] = '\0';
 80016cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80016d2:	4a5d      	ldr	r2, [pc, #372]	@ (8001848 <Ymodem_Receive+0x23c>)
 80016d4:	2100      	movs	r1, #0
 80016d6:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	647b      	str	r3, [r7, #68]	@ 0x44
                    file_ptr ++;
 80016dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016de:	3301      	adds	r3, #1
 80016e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80016e2:	e00a      	b.n	80016fa <Ymodem_Receive+0xee>
                      file_size[i++] = *file_ptr++;
 80016e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016e6:	1c53      	adds	r3, r2, #1
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ec:	1c59      	adds	r1, r3, #1
 80016ee:	6479      	str	r1, [r7, #68]	@ 0x44
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	3348      	adds	r3, #72	@ 0x48
 80016f4:	443b      	add	r3, r7
 80016f6:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80016fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d002      	beq.n	8001708 <Ymodem_Receive+0xfc>
 8001702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d9ed      	bls.n	80016e4 <Ymodem_Receive+0xd8>
                    file_size[i++] = '\0';
 8001708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	647a      	str	r2, [r7, #68]	@ 0x44
 800170e:	3348      	adds	r3, #72	@ 0x48
 8001710:	443b      	add	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 8001718:	f107 021c 	add.w	r2, r7, #28
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff44 	bl	80005b0 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f243 0201 	movw	r2, #12289	@ 0x3001
 8001730:	4293      	cmp	r3, r2
 8001732:	d914      	bls.n	800175e <Ymodem_Receive+0x152>
                      tmp = CA;
 8001734:	2318      	movs	r3, #24
 8001736:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&hlpuart1, &tmp, 1, NAK_TIMEOUT);
 8001738:	f107 010b 	add.w	r1, r7, #11
 800173c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001740:	2201      	movs	r2, #1
 8001742:	4842      	ldr	r0, [pc, #264]	@ (800184c <Ymodem_Receive+0x240>)
 8001744:	f003 fa58 	bl	8004bf8 <HAL_UART_Transmit>
                      HAL_UART_Transmit(&hlpuart1, &tmp, 1, NAK_TIMEOUT);
 8001748:	f107 010b 	add.w	r1, r7, #11
 800174c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001750:	2201      	movs	r2, #1
 8001752:	483e      	ldr	r0, [pc, #248]	@ (800184c <Ymodem_Receive+0x240>)
 8001754:	f003 fa50 	bl	8004bf8 <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8001758:	2305      	movs	r3, #5
 800175a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 800175e:	4837      	ldr	r0, [pc, #220]	@ (800183c <Ymodem_Receive+0x230>)
 8001760:	f7ff f85e 	bl	8000820 <FLASH_If_Erase>
                    *p_size = filesize;
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800176a:	2006      	movs	r0, #6
 800176c:	f7ff f830 	bl	80007d0 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8001770:	2043      	movs	r0, #67	@ 0x43
 8001772:	f7ff f82d 	bl	80007d0 <Serial_PutByte>
 8001776:	e024      	b.n	80017c2 <Ymodem_Receive+0x1b6>
                    Serial_PutByte(ACK);
 8001778:	2006      	movs	r0, #6
 800177a:	f7ff f829 	bl	80007d0 <Serial_PutByte>
                    file_done = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    session_done = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 8001786:	e024      	b.n	80017d2 <Ymodem_Receive+0x1c6>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 8001788:	4b2e      	ldr	r3, [pc, #184]	@ (8001844 <Ymodem_Receive+0x238>)
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)                   
 800178c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	461a      	mov	r2, r3
 8001794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001796:	f7ff f8af 	bl	80008f8 <FLASH_If_Write>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <Ymodem_Receive+0x1a4>
                    flashdestination += packet_length;
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017a4:	4413      	add	r3, r2
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
                    Serial_PutByte(ACK);
 80017a8:	2006      	movs	r0, #6
 80017aa:	f7ff f811 	bl	80007d0 <Serial_PutByte>
 80017ae:	e008      	b.n	80017c2 <Ymodem_Receive+0x1b6>
                    Serial_PutByte(CA);
 80017b0:	2018      	movs	r0, #24
 80017b2:	f7ff f80d 	bl	80007d0 <Serial_PutByte>
                    Serial_PutByte(CA);
 80017b6:	2018      	movs	r0, #24
 80017b8:	f7ff f80a 	bl	80007d0 <Serial_PutByte>
                    result = COM_DATA;
 80017bc:	2304      	movs	r3, #4
 80017be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                packets_received ++;
 80017c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80017c6:	3301      	adds	r3, #1
 80017c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                session_begin = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
              break;
 80017d0:	bf00      	nop
          }
          break;
 80017d2:	e01d      	b.n	8001810 <Ymodem_Receive+0x204>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 80017d4:	2018      	movs	r0, #24
 80017d6:	f7fe fffb 	bl	80007d0 <Serial_PutByte>
          Serial_PutByte(CA);
 80017da:	2018      	movs	r0, #24
 80017dc:	f7fe fff8 	bl	80007d0 <Serial_PutByte>
          result = COM_ABORT;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          break;
 80017e6:	e013      	b.n	8001810 <Ymodem_Receive+0x204>
        default:
          if (session_begin > 0)
 80017e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <Ymodem_Receive+0x1e8>
          {
            errors ++;
 80017ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017f0:	3301      	adds	r3, #1
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
          }
          if (errors > MAX_ERRORS)
 80017f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d906      	bls.n	8001808 <Ymodem_Receive+0x1fc>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 80017fa:	2018      	movs	r0, #24
 80017fc:	f7fe ffe8 	bl	80007d0 <Serial_PutByte>
            Serial_PutByte(CA);
 8001800:	2018      	movs	r0, #24
 8001802:	f7fe ffe5 	bl	80007d0 <Serial_PutByte>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
          }
          break;
 8001806:	e002      	b.n	800180e <Ymodem_Receive+0x202>
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001808:	2043      	movs	r0, #67	@ 0x43
 800180a:	f7fe ffe1 	bl	80007d0 <Serial_PutByte>
          break;
 800180e:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8001810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d104      	bne.n	8001820 <Ymodem_Receive+0x214>
 8001816:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800181a:	2b00      	cmp	r3, #0
 800181c:	f43f af0c 	beq.w	8001638 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 8001820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <Ymodem_Receive+0x224>
 8001826:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800182a:	2b00      	cmp	r3, #0
 800182c:	f43f aefe 	beq.w	800162c <Ymodem_Receive+0x20>
      }
    }
  }
  return result;
 8001830:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8001834:	4618      	mov	r0, r3
 8001836:	3748      	adds	r7, #72	@ 0x48
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	08080000 	.word	0x08080000
 8001840:	20000140 	.word	0x20000140
 8001844:	20000144 	.word	0x20000144
 8001848:	20000100 	.word	0x20000100
 800184c:	20000048 	.word	0x20000048

08001850 <Ymodem_Transmit>:
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef Ymodem_Transmit (uint8_t *p_buf, const uint8_t *p_file_name, uint32_t file_size)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	@ 0x38
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t errors = 0, ack_recpt = 0, size = 0, pkt_size;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	@ 0x30
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t *p_buf_int;
  COM_StatusTypeDef result = COM_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t blk_number = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
#else /* CRC16_F */   
  uint8_t temp_chksum;
#endif /* CRC16_F */  

  /* Prepare first block - header */
  PrepareIntialPacket(aPacketData, p_file_name, file_size);
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	4896      	ldr	r0, [pc, #600]	@ (8001ad0 <Ymodem_Transmit+0x280>)
 8001878:	f7ff fe06 	bl	8001488 <PrepareIntialPacket>

  while (( !ack_recpt ) && ( result == COM_OK ))
 800187c:	e05d      	b.n	800193a <Ymodem_Transmit+0xea>
  {
    /* Send Packet */
    HAL_UART_Transmit(&hlpuart1, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800187e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001882:	2283      	movs	r2, #131	@ 0x83
 8001884:	4993      	ldr	r1, [pc, #588]	@ (8001ad4 <Ymodem_Transmit+0x284>)
 8001886:	4894      	ldr	r0, [pc, #592]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001888:	f003 f9b6 	bl	8004bf8 <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800188c:	2280      	movs	r2, #128	@ 0x80
 800188e:	4993      	ldr	r1, [pc, #588]	@ (8001adc <Ymodem_Transmit+0x28c>)
 8001890:	4893      	ldr	r0, [pc, #588]	@ (8001ae0 <Ymodem_Transmit+0x290>)
 8001892:	f000 fbad 	bl	8001ff0 <HAL_CRC_Calculate>
 8001896:	6178      	str	r0, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe ff96 	bl	80007d0 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe ff91 	bl	80007d0 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&hlpuart1, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 80018ae:	f107 0110 	add.w	r1, r7, #16
 80018b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018b6:	2201      	movs	r2, #1
 80018b8:	4887      	ldr	r0, [pc, #540]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 80018ba:	f003 fa26 	bl	8004d0a <HAL_UART_Receive>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d131      	bne.n	8001928 <Ymodem_Transmit+0xd8>
    {
      if (a_rx_ctrl[0] == ACK)
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d102      	bne.n	80018d0 <Ymodem_Transmit+0x80>
      {
        ack_recpt = 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80018ce:	e02e      	b.n	800192e <Ymodem_Transmit+0xde>
      }
      else if (a_rx_ctrl[0] == CA)
 80018d0:	7c3b      	ldrb	r3, [r7, #16]
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d12b      	bne.n	800192e <Ymodem_Transmit+0xde>
      {
        if ((HAL_UART_Receive(&hlpuart1, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 80018d6:	f107 0110 	add.w	r1, r7, #16
 80018da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018de:	2201      	movs	r2, #1
 80018e0:	487d      	ldr	r0, [pc, #500]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 80018e2:	f003 fa12 	bl	8004d0a <HAL_UART_Receive>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d120      	bne.n	800192e <Ymodem_Transmit+0xde>
 80018ec:	7c3b      	ldrb	r3, [r7, #16]
 80018ee:	2b18      	cmp	r3, #24
 80018f0:	d11d      	bne.n	800192e <Ymodem_Transmit+0xde>
        {
          HAL_Delay( 2 );
 80018f2:	2002      	movs	r0, #2
 80018f4:	f000 fa0e 	bl	8001d14 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&hlpuart1);
 80018f8:	4b77      	ldr	r3, [pc, #476]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	8b1b      	ldrh	r3, [r3, #24]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b75      	ldr	r3, [pc, #468]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0208 	orr.w	r2, r2, #8
 8001908:	b292      	uxth	r2, r2
 800190a:	831a      	strh	r2, [r3, #24]
 800190c:	4b72      	ldr	r3, [pc, #456]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	8b1b      	ldrh	r3, [r3, #24]
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b70      	ldr	r3, [pc, #448]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0210 	orr.w	r2, r2, #16
 800191c:	b292      	uxth	r2, r2
 800191e:	831a      	strh	r2, [r3, #24]
          result = COM_ABORT;
 8001920:	2302      	movs	r3, #2
 8001922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001926:	e002      	b.n	800192e <Ymodem_Transmit+0xde>
        }
      }
    }
    else
    {
      errors++;
 8001928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800192a:	3301      	adds	r3, #1
 800192c:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    if (errors >= MAX_ERRORS)
 800192e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001930:	2b04      	cmp	r3, #4
 8001932:	d902      	bls.n	800193a <Ymodem_Transmit+0xea>
    {
      result = COM_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 800193a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <Ymodem_Transmit+0xf8>
 8001940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001944:	2b00      	cmp	r3, #0
 8001946:	d09a      	beq.n	800187e <Ymodem_Transmit+0x2e>
    }
  }

  p_buf_int = p_buf;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  size = file_size;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Here 1024 bytes length is used to send the packets */
  while ((size) && (result == COM_OK ))
 8001950:	e070      	b.n	8001a34 <Ymodem_Transmit+0x1e4>
  {
    /* Prepare next packet */
    PreparePacket(p_buf_int, aPacketData, blk_number, size);
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001958:	495d      	ldr	r1, [pc, #372]	@ (8001ad0 <Ymodem_Transmit+0x280>)
 800195a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800195c:	f7ff fdf7 	bl	800154e <PreparePacket>
    ack_recpt = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30
    a_rx_ctrl[0] = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	743b      	strb	r3, [r7, #16]
    errors = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Resend packet if NAK for few times else end of communication */
    while (( !ack_recpt ) && ( result == COM_OK ))
 800196c:	e05b      	b.n	8001a26 <Ymodem_Transmit+0x1d6>
    {
      /* Send next packet */
      if (size >= PACKET_1K_SIZE)
 800196e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001974:	d303      	bcc.n	800197e <Ymodem_Transmit+0x12e>
      {
        pkt_size = PACKET_1K_SIZE;
 8001976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800197c:	e001      	b.n	8001982 <Ymodem_Transmit+0x132>
      }
      else
      {
        pkt_size = PACKET_SIZE;
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      HAL_UART_Transmit(&hlpuart1, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001984:	b29b      	uxth	r3, r3
 8001986:	3303      	adds	r3, #3
 8001988:	b29a      	uxth	r2, r3
 800198a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800198e:	4951      	ldr	r1, [pc, #324]	@ (8001ad4 <Ymodem_Transmit+0x284>)
 8001990:	4851      	ldr	r0, [pc, #324]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001992:	f003 f931 	bl	8004bf8 <HAL_UART_Transmit>
      
      /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
      temp_crc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pkt_size);
 8001996:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001998:	4950      	ldr	r1, [pc, #320]	@ (8001adc <Ymodem_Transmit+0x28c>)
 800199a:	4851      	ldr	r0, [pc, #324]	@ (8001ae0 <Ymodem_Transmit+0x290>)
 800199c:	f000 fb28 	bl	8001ff0 <HAL_CRC_Calculate>
 80019a0:	6178      	str	r0, [r7, #20]
      Serial_PutByte(temp_crc >> 8);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe ff11 	bl	80007d0 <Serial_PutByte>
      Serial_PutByte(temp_crc & 0xFF);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe ff0c 	bl	80007d0 <Serial_PutByte>
      temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], pkt_size);
      Serial_PutByte(temp_chksum);
#endif /* CRC16_F */
      
      /* Wait for Ack */
      if ((HAL_UART_Receive(&hlpuart1, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == ACK))
 80019b8:	f107 0110 	add.w	r1, r7, #16
 80019bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019c0:	2201      	movs	r2, #1
 80019c2:	4845      	ldr	r0, [pc, #276]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 80019c4:	f003 f9a1 	bl	8004d0a <HAL_UART_Receive>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d122      	bne.n	8001a14 <Ymodem_Transmit+0x1c4>
 80019ce:	7c3b      	ldrb	r3, [r7, #16]
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d11f      	bne.n	8001a14 <Ymodem_Transmit+0x1c4>
      {
        ack_recpt = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (size > pkt_size)
 80019d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019dc:	429a      	cmp	r2, r3
 80019de:	d912      	bls.n	8001a06 <Ymodem_Transmit+0x1b6>
        {
          p_buf_int += pkt_size;
 80019e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e4:	4413      	add	r3, r2
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
          size -= pkt_size;
 80019e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d103      	bne.n	80019fe <Ymodem_Transmit+0x1ae>
          {
            result = COM_LIMIT; /* boundary error */
 80019f6:	2305      	movs	r3, #5
 80019f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (size > pkt_size)
 80019fc:	e00d      	b.n	8001a1a <Ymodem_Transmit+0x1ca>
          }
          else
          {
            blk_number++;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
        if (size > pkt_size)
 8001a04:	e009      	b.n	8001a1a <Ymodem_Transmit+0x1ca>
          }
        }
        else
        {
          p_buf_int += pkt_size;
 8001a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a0a:	4413      	add	r3, r2
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
          size = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (size > pkt_size)
 8001a12:	e002      	b.n	8001a1a <Ymodem_Transmit+0x1ca>
        }
      }
      else
      {
        errors++;
 8001a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a16:	3301      	adds	r3, #1
 8001a18:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      /* Resend packet if NAK  for a count of 10 else end of communication */
      if (errors >= MAX_ERRORS)
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d902      	bls.n	8001a26 <Ymodem_Transmit+0x1d6>
      {
        result = COM_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    while (( !ack_recpt ) && ( result == COM_OK ))
 8001a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <Ymodem_Transmit+0x1e4>
 8001a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d09c      	beq.n	800196e <Ymodem_Transmit+0x11e>
  while ((size) && (result == COM_OK ))
 8001a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <Ymodem_Transmit+0x1f2>
 8001a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d087      	beq.n	8001952 <Ymodem_Transmit+0x102>
      }
    }
  }

  /* Sending End Of Transmission char */
  ack_recpt = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
  a_rx_ctrl[0] = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	743b      	strb	r3, [r7, #16]
  errors = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001a4e:	e052      	b.n	8001af6 <Ymodem_Transmit+0x2a6>
  {
    Serial_PutByte(EOT);
 8001a50:	2004      	movs	r0, #4
 8001a52:	f7fe febd 	bl	80007d0 <Serial_PutByte>

    /* Wait for Ack */
    if (HAL_UART_Receive(&hlpuart1, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001a56:	f107 0110 	add.w	r1, r7, #16
 8001a5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a5e:	2201      	movs	r2, #1
 8001a60:	481d      	ldr	r0, [pc, #116]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001a62:	f003 f952 	bl	8004d0a <HAL_UART_Receive>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d13b      	bne.n	8001ae4 <Ymodem_Transmit+0x294>
    {
      if (a_rx_ctrl[0] == ACK)
 8001a6c:	7c3b      	ldrb	r3, [r7, #16]
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d102      	bne.n	8001a78 <Ymodem_Transmit+0x228>
      {
        ack_recpt = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a76:	e038      	b.n	8001aea <Ymodem_Transmit+0x29a>
      }
      else if (a_rx_ctrl[0] == CA)
 8001a78:	7c3b      	ldrb	r3, [r7, #16]
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	d135      	bne.n	8001aea <Ymodem_Transmit+0x29a>
      {
        if ((HAL_UART_Receive(&hlpuart1, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 8001a7e:	f107 0110 	add.w	r1, r7, #16
 8001a82:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a86:	2201      	movs	r2, #1
 8001a88:	4813      	ldr	r0, [pc, #76]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001a8a:	f003 f93e 	bl	8004d0a <HAL_UART_Receive>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d12a      	bne.n	8001aea <Ymodem_Transmit+0x29a>
 8001a94:	7c3b      	ldrb	r3, [r7, #16]
 8001a96:	2b18      	cmp	r3, #24
 8001a98:	d127      	bne.n	8001aea <Ymodem_Transmit+0x29a>
        {
          HAL_Delay( 2 );
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f000 f93a 	bl	8001d14 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&hlpuart1);
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	8b1b      	ldrh	r3, [r3, #24]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0208 	orr.w	r2, r2, #8
 8001ab0:	b292      	uxth	r2, r2
 8001ab2:	831a      	strh	r2, [r3, #24]
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	8b1b      	ldrh	r3, [r3, #24]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <Ymodem_Transmit+0x288>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0210 	orr.w	r2, r2, #16
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	831a      	strh	r2, [r3, #24]
          result = COM_ABORT;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ace:	e00c      	b.n	8001aea <Ymodem_Transmit+0x29a>
 8001ad0:	20000140 	.word	0x20000140
 8001ad4:	20000141 	.word	0x20000141
 8001ad8:	20000048 	.word	0x20000048
 8001adc:	20000144 	.word	0x20000144
 8001ae0:	200000d0 	.word	0x200000d0
        }
      }
    }
    else
    {
      errors++;
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (errors >=  MAX_ERRORS)
 8001aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d902      	bls.n	8001af6 <Ymodem_Transmit+0x2a6>
    {
      result = COM_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <Ymodem_Transmit+0x2b4>
 8001afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0a5      	beq.n	8001a50 <Ymodem_Transmit+0x200>
    }
  }

  /* Empty packet sent - some terminal emulators need this to close session */
  if ( result == COM_OK )
 8001b04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d155      	bne.n	8001bb8 <Ymodem_Transmit+0x368>
  {
    /* Preparing an empty packet */
    aPacketData[PACKET_START_INDEX] = SOH;
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc4 <Ymodem_Transmit+0x374>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	705a      	strb	r2, [r3, #1]
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 8001b12:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <Ymodem_Transmit+0x374>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	709a      	strb	r2, [r3, #2]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8001b18:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc4 <Ymodem_Transmit+0x374>)
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	70da      	strb	r2, [r3, #3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001b1e:	2304      	movs	r3, #4
 8001b20:	76fb      	strb	r3, [r7, #27]
 8001b22:	e006      	b.n	8001b32 <Ymodem_Transmit+0x2e2>
    {
      aPacketData [i] = 0x00;
 8001b24:	7efb      	ldrb	r3, [r7, #27]
 8001b26:	4a27      	ldr	r2, [pc, #156]	@ (8001bc4 <Ymodem_Transmit+0x374>)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	54d1      	strb	r1, [r2, r3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001b2c:	7efb      	ldrb	r3, [r7, #27]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	76fb      	strb	r3, [r7, #27]
 8001b32:	7efb      	ldrb	r3, [r7, #27]
 8001b34:	2b83      	cmp	r3, #131	@ 0x83
 8001b36:	d9f5      	bls.n	8001b24 <Ymodem_Transmit+0x2d4>
    }

    /* Send Packet */
    HAL_UART_Transmit(&hlpuart1, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001b38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b3c:	2283      	movs	r2, #131	@ 0x83
 8001b3e:	4922      	ldr	r1, [pc, #136]	@ (8001bc8 <Ymodem_Transmit+0x378>)
 8001b40:	4822      	ldr	r0, [pc, #136]	@ (8001bcc <Ymodem_Transmit+0x37c>)
 8001b42:	f003 f859 	bl	8004bf8 <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001b46:	2280      	movs	r2, #128	@ 0x80
 8001b48:	4921      	ldr	r1, [pc, #132]	@ (8001bd0 <Ymodem_Transmit+0x380>)
 8001b4a:	4822      	ldr	r0, [pc, #136]	@ (8001bd4 <Ymodem_Transmit+0x384>)
 8001b4c:	f000 fa50 	bl	8001ff0 <HAL_CRC_Calculate>
 8001b50:	6178      	str	r0, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fe39 	bl	80007d0 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fe34 	bl	80007d0 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&hlpuart1, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001b68:	f107 0110 	add.w	r1, r7, #16
 8001b6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b70:	2201      	movs	r2, #1
 8001b72:	4816      	ldr	r0, [pc, #88]	@ (8001bcc <Ymodem_Transmit+0x37c>)
 8001b74:	f003 f8c9 	bl	8004d0a <HAL_UART_Receive>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d11c      	bne.n	8001bb8 <Ymodem_Transmit+0x368>
    {
      if (a_rx_ctrl[0] == CA)
 8001b7e:	7c3b      	ldrb	r3, [r7, #16]
 8001b80:	2b18      	cmp	r3, #24
 8001b82:	d119      	bne.n	8001bb8 <Ymodem_Transmit+0x368>
      {
          HAL_Delay( 2 );
 8001b84:	2002      	movs	r0, #2
 8001b86:	f000 f8c5 	bl	8001d14 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&hlpuart1);
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <Ymodem_Transmit+0x37c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	8b1b      	ldrh	r3, [r3, #24]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <Ymodem_Transmit+0x37c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0208 	orr.w	r2, r2, #8
 8001b9a:	b292      	uxth	r2, r2
 8001b9c:	831a      	strh	r2, [r3, #24]
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <Ymodem_Transmit+0x37c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	8b1b      	ldrh	r3, [r3, #24]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <Ymodem_Transmit+0x37c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0210 	orr.w	r2, r2, #16
 8001bae:	b292      	uxth	r2, r2
 8001bb0:	831a      	strh	r2, [r3, #24]
          result = COM_ABORT;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
  }

  return result; /* file transmitted successfully */
 8001bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3738      	adds	r7, #56	@ 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000140 	.word	0x20000140
 8001bc8:	20000141 	.word	0x20000141
 8001bcc:	20000048 	.word	0x20000048
 8001bd0:	20000144 	.word	0x20000144
 8001bd4:	200000d0 	.word	0x200000d0

08001bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bdc:	f7ff fb74 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	@ (8001c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c1c <LoopForever+0xe>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c24 <LoopForever+0x16>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c06:	f003 fe25 	bl	8005854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0a:	f7fe ffeb 	bl	8000be4 <main>

08001c0e <LoopForever>:

LoopForever:
    b LoopForever
 8001c0e:	e7fe      	b.n	8001c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001c1c:	08005fbc 	.word	0x08005fbc
  ldr r2, =_sbss
 8001c20:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001c24:	2000054c 	.word	0x2000054c

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>

08001c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f943 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 f80e 	bl	8001c5c <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	e001      	b.n	8001c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c4c:	f7ff fa68 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c50:	79fb      	ldrb	r3, [r7, #7]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <HAL_InitTick+0x6c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <HAL_InitTick+0x70>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_InitTick+0x6c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f941 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d809      	bhi.n	8001cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ca0:	f000 f919 	bl	8001ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_InitTick+0x74>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e007      	b.n	8001cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e004      	b.n	8001cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e001      	b.n	8001cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000548 	.word	0x20000548

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000548 	.word	0x20000548

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da8:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <__NVIC_GetPriorityGrouping+0x18>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0307 	and.w	r3, r3, #7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	@ (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	@ (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	@ 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff47 	bl	8001d5c <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff5c 	bl	8001da4 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffb0 	bl	8001e7c <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e054      	b.n	8001fe4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7f5b      	ldrb	r3, [r3, #29]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d105      	bne.n	8001f50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff f90c 	bl	8001168 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	791b      	ldrb	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_CRC_Init+0xc4>)
 8001f64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0218 	bic.w	r2, r2, #24
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	e00c      	b.n	8001f92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6899      	ldr	r1, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	461a      	mov	r2, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f94a 	bl	800221c <HAL_CRCEx_Polynomial_Set>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e028      	b.n	8001fe4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	795b      	ldrb	r3, [r3, #5]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	e004      	b.n	8001fb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6912      	ldr	r2, [r2, #16]
 8001fae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	04c11db7 	.word	0x04c11db7

08001ff0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2202      	movs	r2, #2
 8002004:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d006      	beq.n	800202c <HAL_CRC_Calculate+0x3c>
 800201e:	2b03      	cmp	r3, #3
 8002020:	d829      	bhi.n	8002076 <HAL_CRC_Calculate+0x86>
 8002022:	2b01      	cmp	r3, #1
 8002024:	d019      	beq.n	800205a <HAL_CRC_Calculate+0x6a>
 8002026:	2b02      	cmp	r3, #2
 8002028:	d01e      	beq.n	8002068 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800202a:	e024      	b.n	8002076 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e00a      	b.n	8002048 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	441a      	add	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3f0      	bcc.n	8002032 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
      break;
 8002058:	e00e      	b.n	8002078 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f812 	bl	8002088 <CRC_Handle_8>
 8002064:	6138      	str	r0, [r7, #16]
      break;
 8002066:	e007      	b.n	8002078 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68b9      	ldr	r1, [r7, #8]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f89b 	bl	80021a8 <CRC_Handle_16>
 8002072:	6138      	str	r0, [r7, #16]
      break;
 8002074:	e000      	b.n	8002078 <HAL_CRC_Calculate+0x88>
      break;
 8002076:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800207e:	693b      	ldr	r3, [r7, #16]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	e023      	b.n	80020e2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	3301      	adds	r3, #1
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	440b      	add	r3, r1
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020b4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	440b      	add	r3, r1
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80020c4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	3303      	adds	r3, #3
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	440b      	add	r3, r1
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80020d8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	3301      	adds	r3, #1
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d3d6      	bcc.n	800209a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d04f      	beq.n	8002196 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	4413      	add	r3, r2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d117      	bne.n	800214a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b21b      	sxth	r3, r3
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b21a      	sxth	r2, r3
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	3301      	adds	r3, #1
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	440b      	add	r3, r1
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21b      	sxth	r3, r3
 800213c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	8b7a      	ldrh	r2, [r7, #26]
 8002148:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d120      	bne.n	8002196 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b21b      	sxth	r3, r3
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	3301      	adds	r3, #1
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	440b      	add	r3, r1
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	8b7a      	ldrh	r2, [r7, #26]
 8002182:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3724      	adds	r7, #36	@ 0x24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e013      	b.n	80021e2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4413      	add	r3, r2
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	440b      	add	r3, r1
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3e6      	bcc.n	80021ba <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	4413      	add	r3, r2
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800222c:	231f      	movs	r3, #31
 800222e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
 800223e:	e063      	b.n	8002308 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002240:	bf00      	nop
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1e5a      	subs	r2, r3, #1
 8002246:	613a      	str	r2, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_CRCEx_Polynomial_Set+0x44>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b18      	cmp	r3, #24
 8002264:	d846      	bhi.n	80022f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002266:	a201      	add	r2, pc, #4	@ (adr r2, 800226c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	080022fb 	.word	0x080022fb
 8002270:	080022f5 	.word	0x080022f5
 8002274:	080022f5 	.word	0x080022f5
 8002278:	080022f5 	.word	0x080022f5
 800227c:	080022f5 	.word	0x080022f5
 8002280:	080022f5 	.word	0x080022f5
 8002284:	080022f5 	.word	0x080022f5
 8002288:	080022f5 	.word	0x080022f5
 800228c:	080022e9 	.word	0x080022e9
 8002290:	080022f5 	.word	0x080022f5
 8002294:	080022f5 	.word	0x080022f5
 8002298:	080022f5 	.word	0x080022f5
 800229c:	080022f5 	.word	0x080022f5
 80022a0:	080022f5 	.word	0x080022f5
 80022a4:	080022f5 	.word	0x080022f5
 80022a8:	080022f5 	.word	0x080022f5
 80022ac:	080022dd 	.word	0x080022dd
 80022b0:	080022f5 	.word	0x080022f5
 80022b4:	080022f5 	.word	0x080022f5
 80022b8:	080022f5 	.word	0x080022f5
 80022bc:	080022f5 	.word	0x080022f5
 80022c0:	080022f5 	.word	0x080022f5
 80022c4:	080022f5 	.word	0x080022f5
 80022c8:	080022f5 	.word	0x080022f5
 80022cc:	080022d1 	.word	0x080022d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d913      	bls.n	80022fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80022da:	e010      	b.n	80022fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b07      	cmp	r3, #7
 80022e0:	d90f      	bls.n	8002302 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80022e6:	e00c      	b.n	8002302 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	d90b      	bls.n	8002306 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80022f2:	e008      	b.n	8002306 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	75fb      	strb	r3, [r7, #23]
        break;
 80022f8:	e006      	b.n	8002308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022fa:	bf00      	nop
 80022fc:	e004      	b.n	8002308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022fe:	bf00      	nop
 8002300:	e002      	b.n	8002308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002306:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 0118 	bic.w	r1, r3, #24
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	430a      	orrs	r2, r1
 8002328:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800232a:	7dfb      	ldrb	r3, [r7, #23]
}
 800232c:	4618      	mov	r0, r3
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_FLASH_Program+0xd0>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_FLASH_Program+0x1e>
 8002352:	2302      	movs	r3, #2
 8002354:	e053      	b.n	80023fe <HAL_FLASH_Program+0xc6>
 8002356:	4b2c      	ldr	r3, [pc, #176]	@ (8002408 <HAL_FLASH_Program+0xd0>)
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800235c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002360:	f000 f8b6 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002364:	4603      	mov	r3, r0
 8002366:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d143      	bne.n	80023f6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800236e:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <HAL_FLASH_Program+0xd0>)
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002374:	4b25      	ldr	r3, [pc, #148]	@ (800240c <HAL_FLASH_Program+0xd4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002380:	4b22      	ldr	r3, [pc, #136]	@ (800240c <HAL_FLASH_Program+0xd4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a21      	ldr	r2, [pc, #132]	@ (800240c <HAL_FLASH_Program+0xd4>)
 8002386:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800238a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800238c:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <HAL_FLASH_Program+0xd0>)
 800238e:	2202      	movs	r2, #2
 8002390:	771a      	strb	r2, [r3, #28]
 8002392:	e002      	b.n	800239a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002394:	4b1c      	ldr	r3, [pc, #112]	@ (8002408 <HAL_FLASH_Program+0xd0>)
 8002396:	2200      	movs	r2, #0
 8002398:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80023a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023a4:	68b8      	ldr	r0, [r7, #8]
 80023a6:	f000 f8e9 	bl	800257c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80023aa:	2301      	movs	r3, #1
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e010      	b.n	80023d2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d002      	beq.n	80023bc <HAL_FLASH_Program+0x84>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d10a      	bne.n	80023d2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f000 f901 	bl	80025c8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d102      	bne.n	80023d2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80023cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80023d0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80023d6:	f000 f87b 	bl	80024d0 <FLASH_WaitForLastOperation>
 80023da:	4603      	mov	r3, r0
 80023dc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80023e4:	4b09      	ldr	r3, [pc, #36]	@ (800240c <HAL_FLASH_Program+0xd4>)
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4907      	ldr	r1, [pc, #28]	@ (800240c <HAL_FLASH_Program+0xd4>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80023f2:	f000 fad5 	bl	80029a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <HAL_FLASH_Program+0xd0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]

  return status;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000000c 	.word	0x2000000c
 800240c:	40022000 	.word	0x40022000

08002410 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_FLASH_Unlock+0x38>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da0b      	bge.n	800243a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_FLASH_Unlock+0x38>)
 8002424:	4a09      	ldr	r2, [pc, #36]	@ (800244c <HAL_FLASH_Unlock+0x3c>)
 8002426:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002428:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <HAL_FLASH_Unlock+0x38>)
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_FLASH_Unlock+0x40>)
 800242c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_FLASH_Unlock+0x38>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	da01      	bge.n	800243a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800243a:	79fb      	ldrb	r3, [r7, #7]
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40022000 	.word	0x40022000
 800244c:	45670123 	.word	0x45670123
 8002450:	cdef89ab 	.word	0xcdef89ab

08002454 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_FLASH_Lock+0x1c>)
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <HAL_FLASH_Lock+0x1c>)
 800245e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002462:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40022000 	.word	0x40022000

08002474 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_FLASH_OB_Unlock+0x2c>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002486:	4a07      	ldr	r2, [pc, #28]	@ (80024a4 <HAL_FLASH_OB_Unlock+0x30>)
 8002488:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_FLASH_OB_Unlock+0x2c>)
 800248c:	4a06      	ldr	r2, [pc, #24]	@ (80024a8 <HAL_FLASH_OB_Unlock+0x34>)
 800248e:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40022000 	.word	0x40022000
 80024a4:	08192a3b 	.word	0x08192a3b
 80024a8:	4c5d6e7f 	.word	0x4c5d6e7f

080024ac <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_FLASH_OB_Launch+0x20>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <HAL_FLASH_OB_Launch+0x20>)
 80024b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024ba:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80024bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024c0:	f000 f806 	bl	80024d0 <FLASH_WaitForLastOperation>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000

080024d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff fc10 	bl	8001cfc <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80024de:	e00d      	b.n	80024fc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024e6:	d009      	beq.n	80024fc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80024e8:	f7ff fc08 	bl	8001cfc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d801      	bhi.n	80024fc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e036      	b.n	800256a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80024fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <FLASH_WaitForLastOperation+0xa4>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1eb      	bne.n	80024e0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002508:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <FLASH_WaitForLastOperation+0xa4>)
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01d      	beq.n	8002556 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <FLASH_WaitForLastOperation+0xa8>)
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4313      	orrs	r3, r2
 8002522:	4a15      	ldr	r2, [pc, #84]	@ (8002578 <FLASH_WaitForLastOperation+0xa8>)
 8002524:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252c:	d307      	bcc.n	800253e <FLASH_WaitForLastOperation+0x6e>
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <FLASH_WaitForLastOperation+0xa4>)
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8002538:	490e      	ldr	r1, [pc, #56]	@ (8002574 <FLASH_WaitForLastOperation+0xa4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	618b      	str	r3, [r1, #24]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <FLASH_WaitForLastOperation+0x82>
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <FLASH_WaitForLastOperation+0xa4>)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002550:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e009      	b.n	800256a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002556:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <FLASH_WaitForLastOperation+0xa4>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002562:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <FLASH_WaitForLastOperation+0xa4>)
 8002564:	2201      	movs	r2, #1
 8002566:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000
 8002578:	2000000c 	.word	0x2000000c

0800257c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <FLASH_Program_DoubleWord+0x48>)
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <FLASH_Program_DoubleWord+0x48>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800259a:	f3bf 8f6f 	isb	sy
}
 800259e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80025a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	000a      	movs	r2, r1
 80025ae:	2300      	movs	r3, #0
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	3104      	adds	r1, #4
 80025b4:	4613      	mov	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40022000 	.word	0x40022000

080025c8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80025d2:	2340      	movs	r3, #64	@ 0x40
 80025d4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80025de:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <FLASH_Program_Fast+0x68>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <FLASH_Program_Fast+0x68>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ea:	f3ef 8310 	mrs	r3, PRIMASK
 80025ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80025f0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80025f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80025f4:	b672      	cpsid	i
}
 80025f6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	3304      	adds	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3304      	adds	r3, #4
 800260a:	617b      	str	r3, [r7, #20]
    row_index--;
 800260c:	7ffb      	ldrb	r3, [r7, #31]
 800260e:	3b01      	subs	r3, #1
 8002610:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002612:	7ffb      	ldrb	r3, [r7, #31]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ef      	bne.n	80025f8 <FLASH_Program_Fast+0x30>
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002624:	bf00      	nop
 8002626:	3724      	adds	r7, #36	@ 0x24
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40022000 	.word	0x40022000

08002634 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800263e:	4b49      	ldr	r3, [pc, #292]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_FLASHEx_Erase+0x16>
 8002646:	2302      	movs	r3, #2
 8002648:	e087      	b.n	800275a <HAL_FLASHEx_Erase+0x126>
 800264a:	4b46      	ldr	r3, [pc, #280]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002650:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002654:	f7ff ff3c 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d177      	bne.n	8002752 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002662:	4b40      	ldr	r3, [pc, #256]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002668:	4b3f      	ldr	r3, [pc, #252]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002674:	4b3c      	ldr	r3, [pc, #240]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d009      	beq.n	8002694 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002680:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a38      	ldr	r2, [pc, #224]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 8002686:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800268a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800268c:	4b35      	ldr	r3, [pc, #212]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 800268e:	2203      	movs	r2, #3
 8002690:	771a      	strb	r2, [r3, #28]
 8002692:	e016      	b.n	80026c2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002694:	4b33      	ldr	r3, [pc, #204]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 8002696:	2201      	movs	r2, #1
 8002698:	771a      	strb	r2, [r3, #28]
 800269a:	e012      	b.n	80026c2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800269c:	4b32      	ldr	r3, [pc, #200]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d009      	beq.n	80026bc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80026a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 80026ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026b2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80026b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 80026b6:	2202      	movs	r2, #2
 80026b8:	771a      	strb	r2, [r3, #28]
 80026ba:	e002      	b.n	80026c2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80026bc:	4b29      	ldr	r3, [pc, #164]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 80026be:	2200      	movs	r2, #0
 80026c0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d113      	bne.n	80026f2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f908 	bl	80028e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026d8:	f7ff fefa 	bl	80024d0 <FLASH_WaitForLastOperation>
 80026dc:	4603      	mov	r3, r0
 80026de:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80026e0:	4b21      	ldr	r3, [pc, #132]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	4a20      	ldr	r2, [pc, #128]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 80026e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	6153      	str	r3, [r2, #20]
 80026f0:	e02d      	b.n	800274e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026f8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	e01d      	b.n	800273e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	68b8      	ldr	r0, [r7, #8]
 800270a:	f000 f913 	bl	8002934 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800270e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002712:	f7ff fedd 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800271a:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <HAL_FLASHEx_Erase+0x134>)
 8002720:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	601a      	str	r2, [r3, #0]
          break;
 8002736:	e00a      	b.n	800274e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4413      	add	r3, r2
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3d9      	bcc.n	8002702 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800274e:	f000 f927 	bl	80029a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <HAL_FLASHEx_Erase+0x130>)
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]

  return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2000000c 	.word	0x2000000c
 8002768:	40022000 	.word	0x40022000

0800276c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002778:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <HAL_FLASHEx_OBProgram+0xd8>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_FLASHEx_OBProgram+0x18>
 8002780:	2302      	movs	r3, #2
 8002782:	e05a      	b.n	800283a <HAL_FLASHEx_OBProgram+0xce>
 8002784:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <HAL_FLASHEx_OBProgram+0xd8>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HAL_FLASHEx_OBProgram+0xd8>)
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6858      	ldr	r0, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	461a      	mov	r2, r3
 80027aa:	f000 f943 	bl	8002a34 <FLASH_OB_WRPConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f997 	bl	8002afc <FLASH_OB_RDPConfig>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 f9b2 	bl	8002b58 <FLASH_OB_UserConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	429a      	cmp	r2, r3
 8002814:	d00d      	beq.n	8002832 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69d8      	ldr	r0, [r3, #28]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a19      	ldr	r1, [r3, #32]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	461a      	mov	r2, r3
 8002824:	f000 faae 	bl	8002d84 <FLASH_OB_PCROPConfig>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002832:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <HAL_FLASHEx_OBProgram+0xd8>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]

  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000000c 	.word	0x2000000c

08002848 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2206      	movs	r2, #6
 8002854:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_FLASHEx_OBGetConfig+0x2e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d007      	beq.n	8002876 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d10f      	bne.n	8002896 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6858      	ldr	r0, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f103 0108 	add.w	r1, r3, #8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	330c      	adds	r3, #12
 8002890:	461a      	mov	r2, r3
 8002892:	f000 fb23 	bl	8002edc <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8002896:	f000 fb6b 	bl	8002f70 <FLASH_OB_GetRDP>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80028a0:	f000 fb80 	bl	8002fa4 <FLASH_OB_GetUser>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d003      	beq.n	80028ba <HAL_FLASHEx_OBGetConfig+0x72>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d110      	bne.n	80028dc <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f043 0208 	orr.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f103 001c 	add.w	r0, r3, #28
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f103 0120 	add.w	r1, r3, #32
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3324      	adds	r3, #36	@ 0x24
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 fb78 	bl	8002fcc <FLASH_OB_GetPCROP>
  }
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <FLASH_MassErase+0x4c>)
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <FLASH_MassErase+0x4c>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <FLASH_MassErase+0x4c>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <FLASH_MassErase+0x4c>)
 8002912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002916:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <FLASH_MassErase+0x4c>)
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <FLASH_MassErase+0x4c>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002922:	6153      	str	r3, [r2, #20]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40022000 	.word	0x40022000

08002934 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <FLASH_PageErase+0x68>)
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	4a13      	ldr	r2, [pc, #76]	@ (800299c <FLASH_PageErase+0x68>)
 800294e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002952:	6153      	str	r3, [r2, #20]
 8002954:	e005      	b.n	8002962 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <FLASH_PageErase+0x68>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	4a10      	ldr	r2, [pc, #64]	@ (800299c <FLASH_PageErase+0x68>)
 800295c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002960:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <FLASH_PageErase+0x68>)
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <FLASH_PageErase+0x68>)
 8002974:	4313      	orrs	r3, r2
 8002976:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <FLASH_PageErase+0x68>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	4a07      	ldr	r2, [pc, #28]	@ (800299c <FLASH_PageErase+0x68>)
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <FLASH_PageErase+0x68>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <FLASH_PageErase+0x68>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298e:	6153      	str	r3, [r2, #20]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40022000 	.word	0x40022000

080029a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80029a6:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <FLASH_FlushCaches+0x8c>)
 80029a8:	7f1b      	ldrb	r3, [r3, #28]
 80029aa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d002      	beq.n	80029b8 <FLASH_FlushCaches+0x18>
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d117      	bne.n	80029e8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80029b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80029c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a16      	ldr	r2, [pc, #88]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029dc:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d002      	beq.n	80029f4 <FLASH_FlushCaches+0x54>
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d111      	bne.n	8002a18 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 80029fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 8002a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a0a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a0c:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	@ (8002a30 <FLASH_FlushCaches+0x90>)
 8002a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a16:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002a18:	4b04      	ldr	r3, [pc, #16]	@ (8002a2c <FLASH_FlushCaches+0x8c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	771a      	strb	r2, [r3, #28]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	2000000c 	.word	0x2000000c
 8002a30:	40022000 	.word	0x40022000

08002a34 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a44:	f7ff fd44 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d14c      	bne.n	8002aec <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8002a58:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0419      	lsls	r1, r3, #16
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	430b      	orrs	r3, r1
 8002a68:	4923      	ldr	r1, [pc, #140]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002a6e:	e02b      	b.n	8002ac8 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d10b      	bne.n	8002a8e <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0419      	lsls	r1, r3, #16
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	491c      	ldr	r1, [pc, #112]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	630b      	str	r3, [r1, #48]	@ 0x30
 8002a8c:	e01c      	b.n	8002ac8 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d10b      	bne.n	8002aac <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 8002a94:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0419      	lsls	r1, r3, #16
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	4914      	ldr	r1, [pc, #80]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002aaa:	e00d      	b.n	8002ac8 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d10a      	bne.n	8002ac8 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab6:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0419      	lsls	r1, r3, #16
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	490d      	ldr	r1, [pc, #52]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ad4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ad8:	f7ff fcfa 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002adc:	4603      	mov	r3, r0
 8002ade:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <FLASH_OB_WRPConfig+0xc4>)
 8002ae6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002aea:	6153      	str	r3, [r2, #20]
  }

  return status;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40022000 	.word	0x40022000

08002afc <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b08:	f7ff fce2 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d119      	bne.n	8002b4a <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8002b16:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <FLASH_OB_RDPConfig+0x58>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b1e:	490d      	ldr	r1, [pc, #52]	@ (8002b54 <FLASH_OB_RDPConfig+0x58>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <FLASH_OB_RDPConfig+0x58>)
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <FLASH_OB_RDPConfig+0x58>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b30:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b32:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b36:	f7ff fccb 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <FLASH_OB_RDPConfig+0x58>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <FLASH_OB_RDPConfig+0x58>)
 8002b44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002b48:	6153      	str	r3, [r2, #20]
  }

  return status;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40022000 	.word	0x40022000

08002b58 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b6a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b6e:	f7ff fcaf 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002b72:	4603      	mov	r3, r0
 8002b74:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 80fc 	bne.w	8002d76 <FLASH_OB_UserConfig+0x21e>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d009      	beq.n	8002b9c <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b9a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bb8:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bd6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c12:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c4e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c6c:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c8a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ca8:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cc6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	613b      	str	r3, [r7, #16]
#if defined (STM32L412xx) || defined (STM32L422xx) || defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || \
    defined (STM32L442xx) || defined (STM32L443xx) || defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_nSWBOOT0) != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <FLASH_OB_UserConfig+0x1ca>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d20:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nBOOT0) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <FLASH_OB_UserConfig+0x1e8>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d3e:	613b      	str	r3, [r7, #16]
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <FLASH_OB_UserConfig+0x228>)
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	401a      	ands	r2, r3
 8002d4a:	490d      	ldr	r1, [pc, #52]	@ (8002d80 <FLASH_OB_UserConfig+0x228>)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <FLASH_OB_UserConfig+0x228>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <FLASH_OB_UserConfig+0x228>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5c:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d5e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d62:	f7ff fbb5 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002d66:	4603      	mov	r3, r0
 8002d68:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <FLASH_OB_UserConfig+0x228>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <FLASH_OB_UserConfig+0x228>)
 8002d70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002d74:	6153      	str	r3, [r2, #20]
  }

  return status;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40022000 	.word	0x40022000

08002d84 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d94:	f7ff fb9c 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 8002d9c:	7ffb      	ldrb	r3, [r7, #31]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 808c 	bne.w	8002ebc <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002da4:	4b48      	ldr	r3, [pc, #288]	@ (8002ec8 <FLASH_OB_PCROPConfig+0x144>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d115      	bne.n	8002ddc <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 8002db0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002db4:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002db6:	4b45      	ldr	r3, [pc, #276]	@ (8002ecc <FLASH_OB_PCROPConfig+0x148>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d008      	beq.n	8002dd6 <FLASH_OB_PCROPConfig+0x52>
 8002dc4:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <FLASH_OB_PCROPConfig+0x148>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	085a      	lsrs	r2, r3, #1
 8002dcc:	4b40      	ldr	r3, [pc, #256]	@ (8002ed0 <FLASH_OB_PCROPConfig+0x14c>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002dd4:	e000      	b.n	8002dd8 <FLASH_OB_PCROPConfig+0x54>
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <FLASH_OB_PCROPConfig+0x150>)
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e014      	b.n	8002e06 <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <FLASH_OB_PCROPConfig+0x148>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d008      	beq.n	8002dfc <FLASH_OB_PCROPConfig+0x78>
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <FLASH_OB_PCROPConfig+0x148>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	085a      	lsrs	r2, r3, #1
 8002df2:	4b37      	ldr	r3, [pc, #220]	@ (8002ed0 <FLASH_OB_PCROPConfig+0x14c>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002dfa:	e000      	b.n	8002dfe <FLASH_OB_PCROPConfig+0x7a>
 8002dfc:	4b35      	ldr	r3, [pc, #212]	@ (8002ed4 <FLASH_OB_PCROPConfig+0x150>)
 8002dfe:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8002e00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e04:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d11a      	bne.n	8002e46 <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	492d      	ldr	r1, [pc, #180]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	08db      	lsrs	r3, r3, #3
 8002e32:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8002e34:	4b28      	ldr	r3, [pc, #160]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	4926      	ldr	r1, [pc, #152]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e44:	e01e      	b.n	8002e84 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d119      	bne.n	8002e84 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	491d      	ldr	r1, [pc, #116]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8002e74:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	4916      	ldr	r1, [pc, #88]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e92:	4911      	ldr	r1, [pc, #68]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002e98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ea4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ea8:	f7ff fb12 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002eac:	4603      	mov	r3, r0
 8002eae:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	4a08      	ldr	r2, [pc, #32]	@ (8002ed8 <FLASH_OB_PCROPConfig+0x154>)
 8002eb6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002eba:	6153      	str	r3, [r2, #20]
  }

  return status;
 8002ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	1fff75e0 	.word	0x1fff75e0
 8002ed0:	01fffe00 	.word	0x01fffe00
 8002ed4:	08080000 	.word	0x08080000
 8002ed8:	40022000 	.word	0x40022000

08002edc <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8002eee:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8002f04:	e02b      	b.n	8002f5e <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10b      	bne.n	8002f24 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8002f0c:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	e01c      	b.n	8002f5e <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d10b      	bne.n	8002f42 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8002f34:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
}
 8002f40:	e00d      	b.n	8002f5e <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d10a      	bne.n	8002f5e <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002f48:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8002f52:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <FLASH_OB_GetWRP+0x90>)
 8002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40022000 	.word	0x40022000

08002f70 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <FLASH_OB_GetRDP+0x30>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2baa      	cmp	r3, #170	@ 0xaa
 8002f82:	d004      	beq.n	8002f8e <FLASH_OB_GetRDP+0x1e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2bcc      	cmp	r3, #204	@ 0xcc
 8002f88:	d001      	beq.n	8002f8e <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8002f8a:	23bb      	movs	r3, #187	@ 0xbb
 8002f8c:	e002      	b.n	8002f94 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <FLASH_OB_GetRDP+0x30>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	b2db      	uxtb	r3, r3
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40022000 	.word	0x40022000

08002fa4 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <FLASH_OB_GetUser+0x24>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fb6:	607b      	str	r3, [r7, #4]

  return user_config;
 8002fb8:	687b      	ldr	r3, [r7, #4]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40022000 	.word	0x40022000

08002fcc <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	@ 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <FLASH_OB_GetPCROP+0xfc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d115      	bne.n	8003010 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 8002fe4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002fe8:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002fea:	4b38      	ldr	r3, [pc, #224]	@ (80030cc <FLASH_OB_GetPCROP+0x100>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d008      	beq.n	800300a <FLASH_OB_GetPCROP+0x3e>
 8002ff8:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <FLASH_OB_GetPCROP+0x100>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	085a      	lsrs	r2, r3, #1
 8003000:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <FLASH_OB_GetPCROP+0x104>)
 8003002:	4013      	ands	r3, r2
 8003004:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003008:	e000      	b.n	800300c <FLASH_OB_GetPCROP+0x40>
 800300a:	4b32      	ldr	r3, [pc, #200]	@ (80030d4 <FLASH_OB_GetPCROP+0x108>)
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e014      	b.n	800303a <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003010:	4b2e      	ldr	r3, [pc, #184]	@ (80030cc <FLASH_OB_GetPCROP+0x100>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800301a:	4293      	cmp	r3, r2
 800301c:	d008      	beq.n	8003030 <FLASH_OB_GetPCROP+0x64>
 800301e:	4b2b      	ldr	r3, [pc, #172]	@ (80030cc <FLASH_OB_GetPCROP+0x100>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	085a      	lsrs	r2, r3, #1
 8003026:	4b2a      	ldr	r3, [pc, #168]	@ (80030d0 <FLASH_OB_GetPCROP+0x104>)
 8003028:	4013      	ands	r3, r2
 800302a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800302e:	e000      	b.n	8003032 <FLASH_OB_GetPCROP+0x66>
 8003030:	4b28      	ldr	r3, [pc, #160]	@ (80030d4 <FLASH_OB_GetPCROP+0x108>)
 8003032:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8003034:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003038:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d115      	bne.n	8003072 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8003046:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <FLASH_OB_GetPCROP+0x10c>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	b29b      	uxth	r3, r3
 800304c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	00da      	lsls	r2, r3, #3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	441a      	add	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800305a:	4b1f      	ldr	r3, [pc, #124]	@ (80030d8 <FLASH_OB_GetPCROP+0x10c>)
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	b29b      	uxth	r3, r3
 8003060:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	1dda      	adds	r2, r3, #7
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e01a      	b.n	80030a8 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d114      	bne.n	80030a8 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800307e:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <FLASH_OB_GetPCROP+0x10c>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	b29b      	uxth	r3, r3
 8003084:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	00da      	lsls	r2, r3, #3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	441a      	add	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8003092:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <FLASH_OB_GetPCROP+0x10c>)
 8003094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003096:	b29b      	uxth	r3, r3
 8003098:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	00da      	lsls	r2, r3, #3
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4413      	add	r3, r2
 80030a2:	1dda      	adds	r2, r3, #7
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <FLASH_OB_GetPCROP+0x10c>)
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	1fff75e0 	.word	0x1fff75e0
 80030d0:	01fffe00 	.word	0x01fffe00
 80030d4:	08080000 	.word	0x08080000
 80030d8:	40022000 	.word	0x40022000

080030dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ea:	e166      	b.n	80033ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8158 	beq.w	80033b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d005      	beq.n	800311c <HAL_GPIO_Init+0x40>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d130      	bne.n	800317e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003152:	2201      	movs	r2, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0201 	and.w	r2, r3, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d017      	beq.n	80031ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d123      	bne.n	800320e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	6939      	ldr	r1, [r7, #16]
 800320a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80b2 	beq.w	80033b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003250:	4b61      	ldr	r3, [pc, #388]	@ (80033d8 <HAL_GPIO_Init+0x2fc>)
 8003252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003254:	4a60      	ldr	r2, [pc, #384]	@ (80033d8 <HAL_GPIO_Init+0x2fc>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6613      	str	r3, [r2, #96]	@ 0x60
 800325c:	4b5e      	ldr	r3, [pc, #376]	@ (80033d8 <HAL_GPIO_Init+0x2fc>)
 800325e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003268:	4a5c      	ldr	r2, [pc, #368]	@ (80033dc <HAL_GPIO_Init+0x300>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	220f      	movs	r2, #15
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003292:	d02b      	beq.n	80032ec <HAL_GPIO_Init+0x210>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d025      	beq.n	80032e8 <HAL_GPIO_Init+0x20c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a51      	ldr	r2, [pc, #324]	@ (80033e4 <HAL_GPIO_Init+0x308>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d01f      	beq.n	80032e4 <HAL_GPIO_Init+0x208>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a50      	ldr	r2, [pc, #320]	@ (80033e8 <HAL_GPIO_Init+0x30c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d019      	beq.n	80032e0 <HAL_GPIO_Init+0x204>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a4f      	ldr	r2, [pc, #316]	@ (80033ec <HAL_GPIO_Init+0x310>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_GPIO_Init+0x200>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a4e      	ldr	r2, [pc, #312]	@ (80033f0 <HAL_GPIO_Init+0x314>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00d      	beq.n	80032d8 <HAL_GPIO_Init+0x1fc>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a4d      	ldr	r2, [pc, #308]	@ (80033f4 <HAL_GPIO_Init+0x318>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <HAL_GPIO_Init+0x1f8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a4c      	ldr	r2, [pc, #304]	@ (80033f8 <HAL_GPIO_Init+0x31c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_GPIO_Init+0x1f4>
 80032cc:	2307      	movs	r3, #7
 80032ce:	e00e      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032d0:	2308      	movs	r3, #8
 80032d2:	e00c      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032d4:	2306      	movs	r3, #6
 80032d6:	e00a      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032d8:	2305      	movs	r3, #5
 80032da:	e008      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032dc:	2304      	movs	r3, #4
 80032de:	e006      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032e0:	2303      	movs	r3, #3
 80032e2:	e004      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e002      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_GPIO_Init+0x212>
 80032ec:	2300      	movs	r3, #0
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	f002 0203 	and.w	r2, r2, #3
 80032f4:	0092      	lsls	r2, r2, #2
 80032f6:	4093      	lsls	r3, r2
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032fe:	4937      	ldr	r1, [pc, #220]	@ (80033dc <HAL_GPIO_Init+0x300>)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	3302      	adds	r3, #2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800330c:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <HAL_GPIO_Init+0x320>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003330:	4a32      	ldr	r2, [pc, #200]	@ (80033fc <HAL_GPIO_Init+0x320>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003336:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_GPIO_Init+0x320>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800335a:	4a28      	ldr	r2, [pc, #160]	@ (80033fc <HAL_GPIO_Init+0x320>)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003360:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <HAL_GPIO_Init+0x320>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003384:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <HAL_GPIO_Init+0x320>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800338a:	4b1c      	ldr	r3, [pc, #112]	@ (80033fc <HAL_GPIO_Init+0x320>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ae:	4a13      	ldr	r2, [pc, #76]	@ (80033fc <HAL_GPIO_Init+0x320>)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3301      	adds	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f47f ae91 	bne.w	80030ec <HAL_GPIO_Init+0x10>
  }
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010000 	.word	0x40010000
 80033e0:	48000400 	.word	0x48000400
 80033e4:	48000800 	.word	0x48000800
 80033e8:	48000c00 	.word	0x48000c00
 80033ec:	48001000 	.word	0x48001000
 80033f0:	48001400 	.word	0x48001400
 80033f4:	48001800 	.word	0x48001800
 80033f8:	48001c00 	.word	0x48001c00
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e001      	b.n	8003422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	041a      	lsls	r2, r3, #16
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43d9      	mvns	r1, r3
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	400b      	ands	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <HAL_PWREx_GetVoltageRange+0x18>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000

08003480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800348e:	d130      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003490:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349c:	d038      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2232      	movs	r2, #50	@ 0x32
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	3301      	adds	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c4:	e002      	b.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034cc:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d8:	d102      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ec:	d110      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e00f      	b.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fe:	d007      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003500:	4b07      	ldr	r3, [pc, #28]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003508:	4a05      	ldr	r2, [pc, #20]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800350e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	20000000 	.word	0x20000000
 8003528:	431bde83 	.word	0x431bde83

0800352c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003536:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800353a:	6053      	str	r3, [r2, #4]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000

0800354c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f000 bc08 	b.w	8003d70 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003560:	4b96      	ldr	r3, [pc, #600]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356a:	4b94      	ldr	r3, [pc, #592]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80e4 	beq.w	800374a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_RCC_OscConfig+0x4c>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	f040 808b 	bne.w	80036a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b01      	cmp	r3, #1
 8003594:	f040 8087 	bne.w	80036a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003598:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x64>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e3df      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1a      	ldr	r2, [r3, #32]
 80035b4:	4b81      	ldr	r3, [pc, #516]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <HAL_RCC_OscConfig+0x7e>
 80035c0:	4b7e      	ldr	r3, [pc, #504]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c8:	e005      	b.n	80035d6 <HAL_RCC_OscConfig+0x8a>
 80035ca:	4b7c      	ldr	r3, [pc, #496]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80035cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d223      	bcs.n	8003622 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fd92 	bl	8004108 <RCC_SetFlashLatencyFromMSIRange>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e3c0      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ee:	4b73      	ldr	r3, [pc, #460]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a72      	ldr	r2, [pc, #456]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80035f4:	f043 0308 	orr.w	r3, r3, #8
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b70      	ldr	r3, [pc, #448]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	496d      	ldr	r1, [pc, #436]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360c:	4b6b      	ldr	r3, [pc, #428]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	4968      	ldr	r1, [pc, #416]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
 8003620:	e025      	b.n	800366e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003622:	4b66      	ldr	r3, [pc, #408]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a65      	ldr	r2, [pc, #404]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b63      	ldr	r3, [pc, #396]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4960      	ldr	r1, [pc, #384]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003640:	4b5e      	ldr	r3, [pc, #376]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	495b      	ldr	r1, [pc, #364]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fd52 	bl	8004108 <RCC_SetFlashLatencyFromMSIRange>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e380      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366e:	f000 fc87 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4950      	ldr	r1, [pc, #320]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	4a4e      	ldr	r2, [pc, #312]	@ (80037c4 <HAL_RCC_OscConfig+0x278>)
 800368c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800368e:	4b4e      	ldr	r3, [pc, #312]	@ (80037c8 <HAL_RCC_OscConfig+0x27c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fae2 	bl	8001c5c <HAL_InitTick>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d052      	beq.n	8003748 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	e364      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d032      	beq.n	8003714 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ae:	4b43      	ldr	r3, [pc, #268]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a42      	ldr	r2, [pc, #264]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ba:	f7fe fb1f 	bl	8001cfc <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036c2:	f7fe fb1b 	bl	8001cfc <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e34d      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d4:	4b39      	ldr	r3, [pc, #228]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e0:	4b36      	ldr	r3, [pc, #216]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a35      	ldr	r2, [pc, #212]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80036e6:	f043 0308 	orr.w	r3, r3, #8
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b33      	ldr	r3, [pc, #204]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4930      	ldr	r1, [pc, #192]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fe:	4b2f      	ldr	r3, [pc, #188]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	492b      	ldr	r1, [pc, #172]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
 8003712:	e01a      	b.n	800374a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003714:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a28      	ldr	r2, [pc, #160]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003720:	f7fe faec 	bl	8001cfc <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003728:	f7fe fae8 	bl	8001cfc <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e31a      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x1dc>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d073      	beq.n	800383e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d005      	beq.n	8003768 <HAL_RCC_OscConfig+0x21c>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d10e      	bne.n	8003780 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d10b      	bne.n	8003780 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d063      	beq.n	800383c <HAL_RCC_OscConfig+0x2f0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d15f      	bne.n	800383c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e2f7      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x24c>
 800378a:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a0b      	ldr	r2, [pc, #44]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e025      	b.n	80037e4 <HAL_RCC_OscConfig+0x298>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a0:	d114      	bne.n	80037cc <HAL_RCC_OscConfig+0x280>
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a05      	ldr	r2, [pc, #20]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a02      	ldr	r2, [pc, #8]	@ (80037bc <HAL_RCC_OscConfig+0x270>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e013      	b.n	80037e4 <HAL_RCC_OscConfig+0x298>
 80037bc:	40021000 	.word	0x40021000
 80037c0:	08005f64 	.word	0x08005f64
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000004 	.word	0x20000004
 80037cc:	4ba0      	ldr	r3, [pc, #640]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a9f      	ldr	r2, [pc, #636]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a9c      	ldr	r2, [pc, #624]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fa86 	bl	8001cfc <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fa82 	bl	8001cfc <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	@ 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e2b4      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	4b92      	ldr	r3, [pc, #584]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x2a8>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fa72 	bl	8001cfc <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fa6e 	bl	8001cfc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	@ 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e2a0      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	4b88      	ldr	r3, [pc, #544]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x2d0>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d060      	beq.n	800390c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x310>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d119      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d116      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x328>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e27d      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b76      	ldr	r3, [pc, #472]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4973      	ldr	r1, [pc, #460]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003888:	e040      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d023      	beq.n	80038da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003892:	4b6f      	ldr	r3, [pc, #444]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6e      	ldr	r2, [pc, #440]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fe fa2d 	bl	8001cfc <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fe fa29 	bl	8001cfc <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e25b      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	4b65      	ldr	r3, [pc, #404]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b62      	ldr	r3, [pc, #392]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	495f      	ldr	r1, [pc, #380]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
 80038d8:	e018      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b5d      	ldr	r3, [pc, #372]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5c      	ldr	r2, [pc, #368]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fe fa09 	bl	8001cfc <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fe fa05 	bl	8001cfc <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e237      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003900:	4b53      	ldr	r3, [pc, #332]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03c      	beq.n	8003992 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01c      	beq.n	800395a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003920:	4b4b      	ldr	r3, [pc, #300]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003926:	4a4a      	ldr	r2, [pc, #296]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fe f9e4 	bl	8001cfc <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fe f9e0 	bl	8001cfc <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e212      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394a:	4b41      	ldr	r3, [pc, #260]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <HAL_RCC_OscConfig+0x3ec>
 8003958:	e01b      	b.n	8003992 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003960:	4a3b      	ldr	r2, [pc, #236]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fe f9c7 	bl	8001cfc <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003972:	f7fe f9c3 	bl	8001cfc <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e1f5      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003984:	4b32      	ldr	r3, [pc, #200]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ef      	bne.n	8003972 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80a6 	beq.w	8003aec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b27      	ldr	r3, [pc, #156]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	4a26      	ldr	r2, [pc, #152]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80039bc:	4b24      	ldr	r3, [pc, #144]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c8:	2301      	movs	r3, #1
 80039ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	4b21      	ldr	r3, [pc, #132]	@ (8003a54 <HAL_RCC_OscConfig+0x508>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a54 <HAL_RCC_OscConfig+0x508>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a54 <HAL_RCC_OscConfig+0x508>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fe f98a 	bl	8001cfc <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fe f986 	bl	8001cfc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1b8      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <HAL_RCC_OscConfig+0x508>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4d8>
 8003a12:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	4a0d      	ldr	r2, [pc, #52]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a22:	e029      	b.n	8003a78 <HAL_RCC_OscConfig+0x52c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d115      	bne.n	8003a58 <HAL_RCC_OscConfig+0x50c>
 8003a2c:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a32:	4a07      	ldr	r2, [pc, #28]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a3c:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	4a03      	ldr	r2, [pc, #12]	@ (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a4c:	e014      	b.n	8003a78 <HAL_RCC_OscConfig+0x52c>
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40007000 	.word	0x40007000
 8003a58:	4b9d      	ldr	r3, [pc, #628]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5e:	4a9c      	ldr	r2, [pc, #624]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a68:	4b99      	ldr	r3, [pc, #612]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	4a98      	ldr	r2, [pc, #608]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fe f93c 	bl	8001cfc <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fe f938 	bl	8001cfc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e168      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ed      	beq.n	8003a88 <HAL_RCC_OscConfig+0x53c>
 8003aac:	e015      	b.n	8003ada <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fe f925 	bl	8001cfc <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fe f921 	bl	8001cfc <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e151      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	4b80      	ldr	r3, [pc, #512]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ed      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae0:	4b7b      	ldr	r3, [pc, #492]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	4a7a      	ldr	r2, [pc, #488]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03c      	beq.n	8003b72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b00:	4b73      	ldr	r3, [pc, #460]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b06:	4a72      	ldr	r2, [pc, #456]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fe f8f4 	bl	8001cfc <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b18:	f7fe f8f0 	bl	8001cfc <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e122      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b2a:	4b69      	ldr	r3, [pc, #420]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ef      	beq.n	8003b18 <HAL_RCC_OscConfig+0x5cc>
 8003b38:	e01b      	b.n	8003b72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b3a:	4b65      	ldr	r3, [pc, #404]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b40:	4a63      	ldr	r2, [pc, #396]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe f8d7 	bl	8001cfc <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b52:	f7fe f8d3 	bl	8001cfc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e105      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b64:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ef      	bne.n	8003b52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80f9 	beq.w	8003d6e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	f040 80cf 	bne.w	8003d24 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b86:	4b52      	ldr	r3, [pc, #328]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0203 	and.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d12c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d123      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d11b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d113      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d109      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	3b01      	subs	r3, #1
 8003bee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d071      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d068      	beq.n	8003ccc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bfa:	4b35      	ldr	r3, [pc, #212]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c06:	4b32      	ldr	r3, [pc, #200]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0ac      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c16:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c22:	f7fe f86b 	bl	8001cfc <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe f867 	bl	8001cfc <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e099      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	4b24      	ldr	r3, [pc, #144]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c48:	4b21      	ldr	r3, [pc, #132]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b21      	ldr	r3, [pc, #132]	@ (8003cd4 <HAL_RCC_OscConfig+0x788>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c62:	0212      	lsls	r2, r2, #8
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0552      	lsls	r2, r2, #21
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0652      	lsls	r2, r2, #25
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c82:	06d2      	lsls	r2, r2, #27
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4912      	ldr	r1, [pc, #72]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c98:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca4:	f7fe f82a 	bl	8001cfc <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe f826 	bl	8001cfc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e058      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cca:	e050      	b.n	8003d6e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e04f      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd8:	4b27      	ldr	r3, [pc, #156]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d144      	bne.n	8003d6e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b24      	ldr	r3, [pc, #144]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a23      	ldr	r2, [pc, #140]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf0:	4b21      	ldr	r3, [pc, #132]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a20      	ldr	r2, [pc, #128]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cfc:	f7fd fffe 	bl	8001cfc <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd fffa 	bl	8001cfc <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e02c      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x7b8>
 8003d22:	e024      	b.n	8003d6e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d01f      	beq.n	8003d6a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a12      	ldr	r2, [pc, #72]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003d30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fd ffe1 	bl	8001cfc <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd ffdd 	bl	8001cfc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e00f      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	4905      	ldr	r1, [pc, #20]	@ (8003d78 <HAL_RCC_OscConfig+0x82c>)
 8003d62:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_RCC_OscConfig+0x830>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
 8003d68:	e001      	b.n	8003d6e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	feeefffc 	.word	0xfeeefffc

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0e7      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b75      	ldr	r3, [pc, #468]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d910      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b72      	ldr	r3, [pc, #456]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4970      	ldr	r1, [pc, #448]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0cf      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	4b66      	ldr	r3, [pc, #408]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d908      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b63      	ldr	r3, [pc, #396]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4960      	ldr	r1, [pc, #384]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d04c      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e06:	4b5a      	ldr	r3, [pc, #360]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d121      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0a6      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1e:	4b54      	ldr	r3, [pc, #336]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d115      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e09a      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e36:	4b4e      	ldr	r3, [pc, #312]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e08e      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e46:	4b4a      	ldr	r3, [pc, #296]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e086      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b46      	ldr	r3, [pc, #280]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4943      	ldr	r1, [pc, #268]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd ff48 	bl	8001cfc <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fd ff44 	bl	8001cfc <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e06e      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d208      	bcs.n	8003ec6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	492b      	ldr	r1, [pc, #172]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec6:	4b29      	ldr	r3, [pc, #164]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d210      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed4:	4b25      	ldr	r3, [pc, #148]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 0207 	bic.w	r2, r3, #7
 8003edc:	4923      	ldr	r1, [pc, #140]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e036      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4918      	ldr	r1, [pc, #96]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f20:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4910      	ldr	r1, [pc, #64]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f34:	f000 f824 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	490b      	ldr	r1, [pc, #44]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f4>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <HAL_RCC_ClockConfig+0x1f8>)
 8003f52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f54:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <HAL_RCC_ClockConfig+0x1fc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fd fe7f 	bl	8001c5c <HAL_InitTick>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f62:	7afb      	ldrb	r3, [r7, #11]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	08005f64 	.word	0x08005f64
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	@ 0x24
 8003f84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f98:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d121      	bne.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d11e      	bne.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fb4:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fc0:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e005      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800408c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10d      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d102      	bne.n	8003ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff8:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	e004      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d101      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004004:	4b23      	ldr	r3, [pc, #140]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x114>)
 8004006:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d134      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800400e:	4b1e      	ldr	r3, [pc, #120]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0xa6>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d003      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0xac>
 8004024:	e005      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004026:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x110>)
 8004028:	617b      	str	r3, [r7, #20]
      break;
 800402a:	e005      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800402c:	4b19      	ldr	r3, [pc, #100]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x114>)
 800402e:	617b      	str	r3, [r7, #20]
      break;
 8004030:	e002      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	617b      	str	r3, [r7, #20]
      break;
 8004036:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	3301      	adds	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004046:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	fb03 f202 	mul.w	r2, r3, r2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	0e5b      	lsrs	r3, r3, #25
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	3301      	adds	r3, #1
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004078:	69bb      	ldr	r3, [r7, #24]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	@ 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	08005f7c 	.word	0x08005f7c
 8004090:	00f42400 	.word	0x00f42400
 8004094:	007a1200 	.word	0x007a1200

08004098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800409c:	4b03      	ldr	r3, [pc, #12]	@ (80040ac <HAL_RCC_GetHCLKFreq+0x14>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000000 	.word	0x20000000

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040b4:	f7ff fff0 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4904      	ldr	r1, [pc, #16]	@ (80040d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	08005f74 	.word	0x08005f74

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040e0:	f7ff ffda 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0adb      	lsrs	r3, r3, #11
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4904      	ldr	r1, [pc, #16]	@ (8004104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	08005f74 	.word	0x08005f74

08004108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004114:	4b2a      	ldr	r3, [pc, #168]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004120:	f7ff f9a0 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 8004124:	6178      	str	r0, [r7, #20]
 8004126:	e014      	b.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004128:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	4a24      	ldr	r2, [pc, #144]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004132:	6593      	str	r3, [r2, #88]	@ 0x58
 8004134:	4b22      	ldr	r3, [pc, #136]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004140:	f7ff f990 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 8004144:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	4a1d      	ldr	r2, [pc, #116]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004150:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004158:	d10b      	bne.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b80      	cmp	r3, #128	@ 0x80
 800415e:	d919      	bls.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2ba0      	cmp	r3, #160	@ 0xa0
 8004164:	d902      	bls.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004166:	2302      	movs	r3, #2
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e013      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800416c:	2301      	movs	r3, #1
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	e010      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b80      	cmp	r3, #128	@ 0x80
 8004176:	d902      	bls.n	800417e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004178:	2303      	movs	r3, #3
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	e00a      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b80      	cmp	r3, #128	@ 0x80
 8004182:	d102      	bne.n	800418a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004184:	2302      	movs	r3, #2
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e004      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b70      	cmp	r3, #112	@ 0x70
 800418e:	d101      	bne.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004190:	2301      	movs	r3, #1
 8004192:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004194:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 0207 	bic.w	r2, r3, #7
 800419c:	4909      	ldr	r1, [pc, #36]	@ (80041c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041a4:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40022000 	.word	0x40022000

080041c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041d0:	2300      	movs	r3, #0
 80041d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041d4:	2300      	movs	r3, #0
 80041d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d041      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041ec:	d02a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041f2:	d824      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041f8:	d008      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041fe:	d81e      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004204:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004208:	d010      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800420a:	e018      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800420c:	4b86      	ldr	r3, [pc, #536]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a85      	ldr	r2, [pc, #532]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004216:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004218:	e015      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f000 facd 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800422a:	e00c      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3320      	adds	r3, #32
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fbb6 	bl	80049a4 <RCCEx_PLLSAI2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	74fb      	strb	r3, [r7, #19]
      break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800424c:	4b76      	ldr	r3, [pc, #472]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800425a:	4973      	ldr	r1, [pc, #460]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004262:	e001      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d041      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004278:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800427c:	d02a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800427e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004282:	d824      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004288:	d008      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800428a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800428e:	d81e      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004298:	d010      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800429a:	e018      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800429c:	4b62      	ldr	r3, [pc, #392]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a61      	ldr	r2, [pc, #388]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042a8:	e015      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fa85 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042ba:	e00c      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3320      	adds	r3, #32
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fb6e 	bl	80049a4 <RCCEx_PLLSAI2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	74fb      	strb	r3, [r7, #19]
      break;
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042dc:	4b52      	ldr	r3, [pc, #328]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ea:	494f      	ldr	r1, [pc, #316]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042f2:	e001      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a0 	beq.w	8004446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800430a:	4b47      	ldr	r3, [pc, #284]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004320:	4b41      	ldr	r3, [pc, #260]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	4a40      	ldr	r2, [pc, #256]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432a:	6593      	str	r3, [r2, #88]	@ 0x58
 800432c:	4b3e      	ldr	r3, [pc, #248]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004338:	2301      	movs	r3, #1
 800433a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800433c:	4b3b      	ldr	r3, [pc, #236]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a3a      	ldr	r2, [pc, #232]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004348:	f7fd fcd8 	bl	8001cfc <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800434e:	e009      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fd fcd4 	bl	8001cfc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d902      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	74fb      	strb	r3, [r7, #19]
        break;
 8004362:	e005      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004364:	4b31      	ldr	r3, [pc, #196]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ef      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d15c      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004376:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004380:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01f      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	429a      	cmp	r2, r3
 8004392:	d019      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004394:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800439e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043a0:	4b21      	ldr	r3, [pc, #132]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	4a20      	ldr	r2, [pc, #128]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043c0:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fd fc93 	bl	8001cfc <HAL_GetTick>
 80043d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	e00b      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fd fc8f 	bl	8001cfc <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d902      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	74fb      	strb	r3, [r7, #19]
            break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ec      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10c      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004406:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	4904      	ldr	r1, [pc, #16]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800441e:	e009      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	74bb      	strb	r3, [r7, #18]
 8004424:	e006      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004434:	7c7b      	ldrb	r3, [r7, #17]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443a:	4ba6      	ldr	r3, [pc, #664]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	4aa5      	ldr	r2, [pc, #660]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004452:	4ba0      	ldr	r3, [pc, #640]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004458:	f023 0203 	bic.w	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	499c      	ldr	r1, [pc, #624]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004474:	4b97      	ldr	r3, [pc, #604]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447a:	f023 020c 	bic.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	4994      	ldr	r1, [pc, #592]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004496:	4b8f      	ldr	r3, [pc, #572]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	498b      	ldr	r1, [pc, #556]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044b8:	4b86      	ldr	r3, [pc, #536]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	4983      	ldr	r1, [pc, #524]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044da:	4b7e      	ldr	r3, [pc, #504]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e8:	497a      	ldr	r1, [pc, #488]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fc:	4b75      	ldr	r3, [pc, #468]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450a:	4972      	ldr	r1, [pc, #456]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451e:	4b6d      	ldr	r3, [pc, #436]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004524:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452c:	4969      	ldr	r1, [pc, #420]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004540:	4b64      	ldr	r3, [pc, #400]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800454e:	4961      	ldr	r1, [pc, #388]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004562:	4b5c      	ldr	r3, [pc, #368]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	4958      	ldr	r1, [pc, #352]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004584:	4b53      	ldr	r3, [pc, #332]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004592:	4950      	ldr	r1, [pc, #320]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045a6:	4b4b      	ldr	r3, [pc, #300]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b4:	4947      	ldr	r1, [pc, #284]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045c8:	4b42      	ldr	r3, [pc, #264]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d6:	493f      	ldr	r1, [pc, #252]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d028      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ea:	4b3a      	ldr	r3, [pc, #232]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f8:	4936      	ldr	r1, [pc, #216]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004608:	d106      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800460a:	4b32      	ldr	r3, [pc, #200]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004614:	60d3      	str	r3, [r2, #12]
 8004616:	e011      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004620:	d10c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	2101      	movs	r1, #1
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f8c9 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d028      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004648:	4b22      	ldr	r3, [pc, #136]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004656:	491f      	ldr	r1, [pc, #124]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004666:	d106      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004668:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800466e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004672:	60d3      	str	r3, [r2, #12]
 8004674:	e011      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800467e:	d10c      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f89a 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b4:	4907      	ldr	r1, [pc, #28]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c4:	d108      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c6:	4b03      	ldr	r3, [pc, #12]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a02      	ldr	r2, [pc, #8]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046d0:	60d3      	str	r3, [r2, #12]
 80046d2:	e013      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80046d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2101      	movs	r1, #1
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f869 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004708:	4b2c      	ldr	r3, [pc, #176]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004716:	4929      	ldr	r1, [pc, #164]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004726:	d10d      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2102      	movs	r1, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f846 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d014      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	74bb      	strb	r3, [r7, #18]
 8004742:	e011      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800474c:	d10c      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3320      	adds	r3, #32
 8004752:	2102      	movs	r1, #2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f925 	bl	80049a4 <RCCEx_PLLSAI2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004784:	490d      	ldr	r1, [pc, #52]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004798:	4b08      	ldr	r3, [pc, #32]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a8:	4904      	ldr	r1, [pc, #16]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000

080047c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ce:	4b74      	ldr	r3, [pc, #464]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d018      	beq.n	800480c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047da:	4b71      	ldr	r3, [pc, #452]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d10d      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
       ||
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047f2:	4b6b      	ldr	r3, [pc, #428]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
       ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d047      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	e044      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d018      	beq.n	8004846 <RCCEx_PLLSAI1_Config+0x86>
 8004814:	2b03      	cmp	r3, #3
 8004816:	d825      	bhi.n	8004864 <RCCEx_PLLSAI1_Config+0xa4>
 8004818:	2b01      	cmp	r3, #1
 800481a:	d002      	beq.n	8004822 <RCCEx_PLLSAI1_Config+0x62>
 800481c:	2b02      	cmp	r3, #2
 800481e:	d009      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x74>
 8004820:	e020      	b.n	8004864 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004822:	4b5f      	ldr	r3, [pc, #380]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11d      	bne.n	800486a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004832:	e01a      	b.n	800486a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004834:	4b5a      	ldr	r3, [pc, #360]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d116      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004844:	e013      	b.n	800486e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004846:	4b56      	ldr	r3, [pc, #344]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004852:	4b53      	ldr	r3, [pc, #332]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004862:	e006      	b.n	8004872 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      break;
 8004868:	e004      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004872:	bf00      	nop
    }

    if(status == HAL_OK)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800487a:	4b49      	ldr	r3, [pc, #292]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	3b01      	subs	r3, #1
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	430b      	orrs	r3, r1
 8004890:	4943      	ldr	r1, [pc, #268]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d17c      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800489c:	4b40      	ldr	r3, [pc, #256]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3f      	ldr	r2, [pc, #252]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a8:	f7fd fa28 	bl	8001cfc <HAL_GetTick>
 80048ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ae:	e009      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b0:	f7fd fa24 	bl	8001cfc <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d902      	bls.n	80048c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	73fb      	strb	r3, [r7, #15]
        break;
 80048c2:	e005      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c4:	4b36      	ldr	r3, [pc, #216]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ef      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d15f      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d110      	bne.n	80048fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048dc:	4b30      	ldr	r3, [pc, #192]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80048e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6892      	ldr	r2, [r2, #8]
 80048ec:	0211      	lsls	r1, r2, #8
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68d2      	ldr	r2, [r2, #12]
 80048f2:	06d2      	lsls	r2, r2, #27
 80048f4:	430a      	orrs	r2, r1
 80048f6:	492a      	ldr	r1, [pc, #168]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]
 80048fc:	e027      	b.n	800494e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d112      	bne.n	800492a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004904:	4b26      	ldr	r3, [pc, #152]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800490c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6892      	ldr	r2, [r2, #8]
 8004914:	0211      	lsls	r1, r2, #8
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6912      	ldr	r2, [r2, #16]
 800491a:	0852      	lsrs	r2, r2, #1
 800491c:	3a01      	subs	r2, #1
 800491e:	0552      	lsls	r2, r2, #21
 8004920:	430a      	orrs	r2, r1
 8004922:	491f      	ldr	r1, [pc, #124]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	610b      	str	r3, [r1, #16]
 8004928:	e011      	b.n	800494e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492a:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004932:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6892      	ldr	r2, [r2, #8]
 800493a:	0211      	lsls	r1, r2, #8
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6952      	ldr	r2, [r2, #20]
 8004940:	0852      	lsrs	r2, r2, #1
 8004942:	3a01      	subs	r2, #1
 8004944:	0652      	lsls	r2, r2, #25
 8004946:	430a      	orrs	r2, r1
 8004948:	4915      	ldr	r1, [pc, #84]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800494e:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a13      	ldr	r2, [pc, #76]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004958:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fd f9cf 	bl	8001cfc <HAL_GetTick>
 800495e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004960:	e009      	b.n	8004976 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004962:	f7fd f9cb 	bl	8001cfc <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d902      	bls.n	8004976 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	73fb      	strb	r3, [r7, #15]
          break;
 8004974:	e005      	b.n	8004982 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004976:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ef      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	4313      	orrs	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004996:	7bfb      	ldrb	r3, [r7, #15]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000

080049a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049b2:	4b69      	ldr	r3, [pc, #420]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049be:	4b66      	ldr	r3, [pc, #408]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0203 	and.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d10d      	bne.n	80049ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
       ||
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049d6:	4b60      	ldr	r3, [pc, #384]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
       ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d047      	beq.n	8004a7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	e044      	b.n	8004a7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d018      	beq.n	8004a2a <RCCEx_PLLSAI2_Config+0x86>
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d825      	bhi.n	8004a48 <RCCEx_PLLSAI2_Config+0xa4>
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d002      	beq.n	8004a06 <RCCEx_PLLSAI2_Config+0x62>
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d009      	beq.n	8004a18 <RCCEx_PLLSAI2_Config+0x74>
 8004a04:	e020      	b.n	8004a48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a06:	4b54      	ldr	r3, [pc, #336]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11d      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a16:	e01a      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a18:	4b4f      	ldr	r3, [pc, #316]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a28:	e013      	b.n	8004a52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a36:	4b48      	ldr	r3, [pc, #288]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a46:	e006      	b.n	8004a56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e004      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10d      	bne.n	8004a7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	430b      	orrs	r3, r1
 8004a74:	4938      	ldr	r1, [pc, #224]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d166      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a80:	4b35      	ldr	r3, [pc, #212]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a34      	ldr	r2, [pc, #208]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fd f936 	bl	8001cfc <HAL_GetTick>
 8004a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a92:	e009      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a94:	f7fd f932 	bl	8001cfc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa6:	e005      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d149      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d110      	bne.n	8004ae2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac0:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ac8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6892      	ldr	r2, [r2, #8]
 8004ad0:	0211      	lsls	r1, r2, #8
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	06d2      	lsls	r2, r2, #27
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	491f      	ldr	r1, [pc, #124]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	614b      	str	r3, [r1, #20]
 8004ae0:	e011      	b.n	8004b06 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004aea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6892      	ldr	r2, [r2, #8]
 8004af2:	0211      	lsls	r1, r2, #8
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6912      	ldr	r2, [r2, #16]
 8004af8:	0852      	lsrs	r2, r2, #1
 8004afa:	3a01      	subs	r2, #1
 8004afc:	0652      	lsls	r2, r2, #25
 8004afe:	430a      	orrs	r2, r1
 8004b00:	4915      	ldr	r1, [pc, #84]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b06:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a13      	ldr	r2, [pc, #76]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b12:	f7fd f8f3 	bl	8001cfc <HAL_GetTick>
 8004b16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b18:	e009      	b.n	8004b2e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b1a:	f7fd f8ef 	bl	8001cfc <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d902      	bls.n	8004b2e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b2c:	e005      	b.n	8004b3a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ef      	beq.n	8004b1a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000

08004b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e040      	b.n	8004bf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fb12 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	@ 0x24
 8004b88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fc32 	bl	800540c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f977 	bl	8004e9c <UART_SetConfig>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e01b      	b.n	8004bf0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fcb1 	bl	8005550 <UART_CheckIdleState>
 8004bee:	4603      	mov	r3, r0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	@ 0x28
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d177      	bne.n	8004d00 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Transmit+0x24>
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e070      	b.n	8004d02 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2221      	movs	r2, #33	@ 0x21
 8004c2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c2e:	f7fd f865 	bl	8001cfc <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	d108      	bne.n	8004c60 <HAL_UART_Transmit+0x68>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e003      	b.n	8004c68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c68:	e02f      	b.n	8004cca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2180      	movs	r1, #128	@ 0x80
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fd13 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e03b      	b.n	8004d02 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	881a      	ldrh	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9c:	b292      	uxth	r2, r2
 8004c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e007      	b.n	8004cb8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1c9      	bne.n	8004c6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2140      	movs	r1, #64	@ 0x40
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fcdd 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e005      	b.n	8004d02 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08a      	sub	sp, #40	@ 0x28
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	f040 80b6 	bne.w	8004e92 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_Receive+0x28>
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0ae      	b.n	8004e94 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2222      	movs	r2, #34	@ 0x22
 8004d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d4c:	f7fc ffd6 	bl	8001cfc <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	88fa      	ldrh	r2, [r7, #6]
 8004d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	d10e      	bne.n	8004d8a <HAL_UART_Receive+0x80>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <HAL_UART_Receive+0x76>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d7e:	e02d      	b.n	8004ddc <HAL_UART_Receive+0xd2>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	22ff      	movs	r2, #255	@ 0xff
 8004d84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d88:	e028      	b.n	8004ddc <HAL_UART_Receive+0xd2>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <HAL_UART_Receive+0xa4>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_UART_Receive+0x9a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	22ff      	movs	r2, #255	@ 0xff
 8004d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004da2:	e01b      	b.n	8004ddc <HAL_UART_Receive+0xd2>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	227f      	movs	r2, #127	@ 0x7f
 8004da8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dac:	e016      	b.n	8004ddc <HAL_UART_Receive+0xd2>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004db6:	d10d      	bne.n	8004dd4 <HAL_UART_Receive+0xca>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <HAL_UART_Receive+0xc0>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	227f      	movs	r2, #127	@ 0x7f
 8004dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dc8:	e008      	b.n	8004ddc <HAL_UART_Receive+0xd2>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	223f      	movs	r2, #63	@ 0x3f
 8004dce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Receive+0xd2>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004de2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dec:	d108      	bne.n	8004e00 <HAL_UART_Receive+0xf6>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e003      	b.n	8004e08 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e08:	e037      	b.n	8004e7a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2120      	movs	r1, #32
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fc43 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e033      	b.n	8004e94 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10c      	bne.n	8004e4c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	8a7b      	ldrh	r3, [r7, #18]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	3302      	adds	r3, #2
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e00d      	b.n	8004e68 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	8a7b      	ldrh	r3, [r7, #18]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1c1      	bne.n	8004e0a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
  }
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b08a      	sub	sp, #40	@ 0x28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4ba4      	ldr	r3, [pc, #656]	@ (800515c <UART_SetConfig+0x2c0>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a99      	ldr	r2, [pc, #612]	@ (8005160 <UART_SetConfig+0x2c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f04:	4313      	orrs	r3, r2
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a90      	ldr	r2, [pc, #576]	@ (8005164 <UART_SetConfig+0x2c8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d126      	bne.n	8004f74 <UART_SetConfig+0xd8>
 8004f26:	4b90      	ldr	r3, [pc, #576]	@ (8005168 <UART_SetConfig+0x2cc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d81b      	bhi.n	8004f6c <UART_SetConfig+0xd0>
 8004f34:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <UART_SetConfig+0xa0>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e116      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f54:	2302      	movs	r3, #2
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e112      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e10e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f64:	2308      	movs	r3, #8
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6a:	e10a      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f72:	e106      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a7c      	ldr	r2, [pc, #496]	@ (800516c <UART_SetConfig+0x2d0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d138      	bne.n	8004ff0 <UART_SetConfig+0x154>
 8004f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8005168 <UART_SetConfig+0x2cc>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d82d      	bhi.n	8004fe8 <UART_SetConfig+0x14c>
 8004f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <UART_SetConfig+0xf8>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fe9 	.word	0x08004fe9
 8004f9c:	08004fe9 	.word	0x08004fe9
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004fe9 	.word	0x08004fe9
 8004fac:	08004fe9 	.word	0x08004fe9
 8004fb0:	08004fe9 	.word	0x08004fe9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fce:	e0d8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd6:	e0d4      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fde:	e0d0      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e0cc      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e0c8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8005170 <UART_SetConfig+0x2d4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d125      	bne.n	8005046 <UART_SetConfig+0x1aa>
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8005168 <UART_SetConfig+0x2cc>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005004:	2b30      	cmp	r3, #48	@ 0x30
 8005006:	d016      	beq.n	8005036 <UART_SetConfig+0x19a>
 8005008:	2b30      	cmp	r3, #48	@ 0x30
 800500a:	d818      	bhi.n	800503e <UART_SetConfig+0x1a2>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d00a      	beq.n	8005026 <UART_SetConfig+0x18a>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d814      	bhi.n	800503e <UART_SetConfig+0x1a2>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <UART_SetConfig+0x182>
 8005018:	2b10      	cmp	r3, #16
 800501a:	d008      	beq.n	800502e <UART_SetConfig+0x192>
 800501c:	e00f      	b.n	800503e <UART_SetConfig+0x1a2>
 800501e:	2300      	movs	r3, #0
 8005020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005024:	e0ad      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005026:	2302      	movs	r3, #2
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502c:	e0a9      	b.n	8005182 <UART_SetConfig+0x2e6>
 800502e:	2304      	movs	r3, #4
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005034:	e0a5      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005036:	2308      	movs	r3, #8
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503c:	e0a1      	b.n	8005182 <UART_SetConfig+0x2e6>
 800503e:	2310      	movs	r3, #16
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005044:	e09d      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4a      	ldr	r2, [pc, #296]	@ (8005174 <UART_SetConfig+0x2d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d125      	bne.n	800509c <UART_SetConfig+0x200>
 8005050:	4b45      	ldr	r3, [pc, #276]	@ (8005168 <UART_SetConfig+0x2cc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800505a:	2bc0      	cmp	r3, #192	@ 0xc0
 800505c:	d016      	beq.n	800508c <UART_SetConfig+0x1f0>
 800505e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005060:	d818      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 8005062:	2b80      	cmp	r3, #128	@ 0x80
 8005064:	d00a      	beq.n	800507c <UART_SetConfig+0x1e0>
 8005066:	2b80      	cmp	r3, #128	@ 0x80
 8005068:	d814      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x1d8>
 800506e:	2b40      	cmp	r3, #64	@ 0x40
 8005070:	d008      	beq.n	8005084 <UART_SetConfig+0x1e8>
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x1f8>
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507a:	e082      	b.n	8005182 <UART_SetConfig+0x2e6>
 800507c:	2302      	movs	r3, #2
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e07e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e07a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e076      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e072      	b.n	8005182 <UART_SetConfig+0x2e6>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a35      	ldr	r2, [pc, #212]	@ (8005178 <UART_SetConfig+0x2dc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d12a      	bne.n	80050fc <UART_SetConfig+0x260>
 80050a6:	4b30      	ldr	r3, [pc, #192]	@ (8005168 <UART_SetConfig+0x2cc>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050b4:	d01a      	beq.n	80050ec <UART_SetConfig+0x250>
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ba:	d81b      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c0:	d00c      	beq.n	80050dc <UART_SetConfig+0x240>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c6:	d815      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x238>
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d0:	d008      	beq.n	80050e4 <UART_SetConfig+0x248>
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x258>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050da:	e052      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e2:	e04e      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ea:	e04a      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f2:	e046      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fa:	e042      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <UART_SetConfig+0x2c4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d13a      	bne.n	800517c <UART_SetConfig+0x2e0>
 8005106:	4b18      	ldr	r3, [pc, #96]	@ (8005168 <UART_SetConfig+0x2cc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005110:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005114:	d01a      	beq.n	800514c <UART_SetConfig+0x2b0>
 8005116:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800511a:	d81b      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 800511c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005120:	d00c      	beq.n	800513c <UART_SetConfig+0x2a0>
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005126:	d815      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <UART_SetConfig+0x298>
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005130:	d008      	beq.n	8005144 <UART_SetConfig+0x2a8>
 8005132:	e00f      	b.n	8005154 <UART_SetConfig+0x2b8>
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e022      	b.n	8005182 <UART_SetConfig+0x2e6>
 800513c:	2302      	movs	r3, #2
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005142:	e01e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514a:	e01a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005152:	e016      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800515a:	e012      	b.n	8005182 <UART_SetConfig+0x2e6>
 800515c:	efff69f3 	.word	0xefff69f3
 8005160:	40008000 	.word	0x40008000
 8005164:	40013800 	.word	0x40013800
 8005168:	40021000 	.word	0x40021000
 800516c:	40004400 	.word	0x40004400
 8005170:	40004800 	.word	0x40004800
 8005174:	40004c00 	.word	0x40004c00
 8005178:	40005000 	.word	0x40005000
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a9f      	ldr	r2, [pc, #636]	@ (8005404 <UART_SetConfig+0x568>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d17a      	bne.n	8005282 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800518c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005190:	2b08      	cmp	r3, #8
 8005192:	d824      	bhi.n	80051de <UART_SetConfig+0x342>
 8005194:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <UART_SetConfig+0x300>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051cf 	.word	0x080051cf
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051df 	.word	0x080051df
 80051b8:	080051df 	.word	0x080051df
 80051bc:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe ff76 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 80051c4:	61f8      	str	r0, [r7, #28]
        break;
 80051c6:	e010      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005408 <UART_SetConfig+0x56c>)
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	e00d      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fe fed7 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 80051d2:	61f8      	str	r0, [r7, #28]
        break;
 80051d4:	e009      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051da:	61fb      	str	r3, [r7, #28]
        break;
 80051dc:	e005      	b.n	80051ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80fb 	beq.w	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d305      	bcc.n	800520e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005214:	e0e8      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2200      	movs	r2, #0
 800521a:	461c      	mov	r4, r3
 800521c:	4615      	mov	r5, r2
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	022b      	lsls	r3, r5, #8
 8005228:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800522c:	0222      	lsls	r2, r4, #8
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6849      	ldr	r1, [r1, #4]
 8005232:	0849      	lsrs	r1, r1, #1
 8005234:	2000      	movs	r0, #0
 8005236:	4688      	mov	r8, r1
 8005238:	4681      	mov	r9, r0
 800523a:	eb12 0a08 	adds.w	sl, r2, r8
 800523e:	eb43 0b09 	adc.w	fp, r3, r9
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fa ffca 	bl	80001ec <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005266:	d308      	bcc.n	800527a <UART_SetConfig+0x3de>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800526e:	d204      	bcs.n	800527a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	e0b6      	b.n	80053e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005280:	e0b2      	b.n	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800528a:	d15e      	bne.n	800534a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800528c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005290:	2b08      	cmp	r3, #8
 8005292:	d828      	bhi.n	80052e6 <UART_SetConfig+0x44a>
 8005294:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <UART_SetConfig+0x400>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fef6 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 80052c4:	61f8      	str	r0, [r7, #28]
        break;
 80052c6:	e014      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe ff08 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005408 <UART_SetConfig+0x56c>)
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe fe53 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 80052da:	61f8      	str	r0, [r7, #28]
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d077      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005a      	lsls	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	441a      	add	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b0f      	cmp	r3, #15
 8005312:	d916      	bls.n	8005342 <UART_SetConfig+0x4a6>
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531a:	d212      	bcs.n	8005342 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f023 030f 	bic.w	r3, r3, #15
 8005324:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	b29a      	uxth	r2, r3
 8005332:	8afb      	ldrh	r3, [r7, #22]
 8005334:	4313      	orrs	r3, r2
 8005336:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	8afa      	ldrh	r2, [r7, #22]
 800533e:	60da      	str	r2, [r3, #12]
 8005340:	e052      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005348:	e04e      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800534a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800534e:	2b08      	cmp	r3, #8
 8005350:	d827      	bhi.n	80053a2 <UART_SetConfig+0x506>
 8005352:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <UART_SetConfig+0x4bc>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800538d 	.word	0x0800538d
 8005364:	080053a3 	.word	0x080053a3
 8005368:	08005393 	.word	0x08005393
 800536c:	080053a3 	.word	0x080053a3
 8005370:	080053a3 	.word	0x080053a3
 8005374:	080053a3 	.word	0x080053a3
 8005378:	0800539b 	.word	0x0800539b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800537c:	f7fe fe98 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8005380:	61f8      	str	r0, [r7, #28]
        break;
 8005382:	e014      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005384:	f7fe feaa 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 8005388:	61f8      	str	r0, [r7, #28]
        break;
 800538a:	e010      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800538c:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <UART_SetConfig+0x56c>)
 800538e:	61fb      	str	r3, [r7, #28]
        break;
 8005390:	e00d      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005392:	f7fe fdf5 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8005396:	61f8      	str	r0, [r7, #28]
        break;
 8005398:	e009      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800539e:	61fb      	str	r3, [r7, #28]
        break;
 80053a0:	e005      	b.n	80053ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053ac:	bf00      	nop
    }

    if (pclk != 0U)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d019      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085a      	lsrs	r2, r3, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d909      	bls.n	80053e2 <UART_SetConfig+0x546>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d4:	d205      	bcs.n	80053e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e002      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	@ 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005402:	bf00      	nop
 8005404:	40008000 	.word	0x40008000
 8005408:	00f42400 	.word	0x00f42400

0800540c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01a      	beq.n	8005522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800550a:	d10a      	bne.n	8005522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b098      	sub	sp, #96	@ 0x60
 8005554:	af02      	add	r7, sp, #8
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005560:	f7fc fbcc 	bl	8001cfc <HAL_GetTick>
 8005564:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d12e      	bne.n	80055d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005574:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800557c:	2200      	movs	r2, #0
 800557e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f88c 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d021      	beq.n	80055d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e6      	bne.n	800558e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e062      	b.n	8005698 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d149      	bne.n	8005674 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f856 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d03c      	beq.n	8005674 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	623b      	str	r3, [r7, #32]
   return(result);
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800560e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005618:	633b      	str	r3, [r7, #48]	@ 0x30
 800561a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800561e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60fb      	str	r3, [r7, #12]
   return(result);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800564c:	61fa      	str	r2, [r7, #28]
 800564e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	69b9      	ldr	r1, [r7, #24]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	617b      	str	r3, [r7, #20]
   return(result);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e5      	bne.n	800562c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e011      	b.n	8005698 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3758      	adds	r7, #88	@ 0x58
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b0:	e04f      	b.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056b8:	d04b      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fc fb1f 	bl	8001cfc <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e04e      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d037      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b80      	cmp	r3, #128	@ 0x80
 80056e6:	d034      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b40      	cmp	r3, #64	@ 0x40
 80056ec:	d031      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d110      	bne.n	800571e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f838 	bl	800577a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2208      	movs	r2, #8
 800570e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e029      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800572c:	d111      	bne.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f81e 	bl	800577a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e00f      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d0a0      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800577a:	b480      	push	{r7}
 800577c:	b095      	sub	sp, #84	@ 0x54
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e6      	bne.n	8005782 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e5      	bne.n	80057b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d118      	bne.n	8005822 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f023 0310 	bic.w	r3, r3, #16
 8005804:	647b      	str	r3, [r7, #68]	@ 0x44
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6979      	ldr	r1, [r7, #20]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	613b      	str	r3, [r7, #16]
   return(result);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e6      	bne.n	80057f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005836:	bf00      	nop
 8005838:	3754      	adds	r7, #84	@ 0x54
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <memset>:
 8005842:	4402      	add	r2, r0
 8005844:	4603      	mov	r3, r0
 8005846:	4293      	cmp	r3, r2
 8005848:	d100      	bne.n	800584c <memset+0xa>
 800584a:	4770      	bx	lr
 800584c:	f803 1b01 	strb.w	r1, [r3], #1
 8005850:	e7f9      	b.n	8005846 <memset+0x4>
	...

08005854 <__libc_init_array>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4d0d      	ldr	r5, [pc, #52]	@ (800588c <__libc_init_array+0x38>)
 8005858:	4c0d      	ldr	r4, [pc, #52]	@ (8005890 <__libc_init_array+0x3c>)
 800585a:	1b64      	subs	r4, r4, r5
 800585c:	10a4      	asrs	r4, r4, #2
 800585e:	2600      	movs	r6, #0
 8005860:	42a6      	cmp	r6, r4
 8005862:	d109      	bne.n	8005878 <__libc_init_array+0x24>
 8005864:	4d0b      	ldr	r5, [pc, #44]	@ (8005894 <__libc_init_array+0x40>)
 8005866:	4c0c      	ldr	r4, [pc, #48]	@ (8005898 <__libc_init_array+0x44>)
 8005868:	f000 f818 	bl	800589c <_init>
 800586c:	1b64      	subs	r4, r4, r5
 800586e:	10a4      	asrs	r4, r4, #2
 8005870:	2600      	movs	r6, #0
 8005872:	42a6      	cmp	r6, r4
 8005874:	d105      	bne.n	8005882 <__libc_init_array+0x2e>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	f855 3b04 	ldr.w	r3, [r5], #4
 800587c:	4798      	blx	r3
 800587e:	3601      	adds	r6, #1
 8005880:	e7ee      	b.n	8005860 <__libc_init_array+0xc>
 8005882:	f855 3b04 	ldr.w	r3, [r5], #4
 8005886:	4798      	blx	r3
 8005888:	3601      	adds	r6, #1
 800588a:	e7f2      	b.n	8005872 <__libc_init_array+0x1e>
 800588c:	08005fb4 	.word	0x08005fb4
 8005890:	08005fb4 	.word	0x08005fb4
 8005894:	08005fb4 	.word	0x08005fb4
 8005898:	08005fb8 	.word	0x08005fb8

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
